// Generated from PlantUML.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PlantUMLListener = require('./PlantUMLListener').PlantUMLListener;
var PlantUMLVisitor = require('./PlantUMLVisitor').PlantUMLVisitor;

var grammarFileName = "PlantUML.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003D\u033d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002",
    "|\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0007\u0003\u0085\n\u0003\f\u0003\u000e\u0003",
    "\u0088\u000b\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u008c\n\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u0090\n\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u0094\n\u0004\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u0098\n\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u009c\n\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00a2\n\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u00a6\n\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00ad\n\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00b2\n\u0004\u0003",
    "\u0004\u0003\u0004\u0005\u0004\u00b6\n\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u00ba\n\u0004\u0003\u0005\u0005\u0005\u00bd\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00c2\n\u0005\f\u0005\u000e",
    "\u0005\u00c5\u000b\u0005\u0006\u0005\u00c7\n\u0005\r\u0005\u000e\u0005",
    "\u00c8\u0003\u0005\u0005\u0005\u00cc\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00d9\n\u0006\u0003",
    "\u0007\u0003\u0007\u0003\b\u0005\b\u00de\n\b\u0003\b\u0003\b\u0003\b",
    "\u0007\b\u00e3\n\b\f\b\u000e\b\u00e6\u000b\b\u0007\b\u00e8\n\b\f\b\u000e",
    "\b\u00eb\u000b\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0005\f\u00f5\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u00fb\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0007\f\u0104\n\f\f\f\u000e\f\u0107\u000b\f\u0003\f\u0005\f\u010a\n",
    "\f\u0003\r\u0003\r\u0003\r\u0005\r\u010f\n\r\u0003\r\u0005\r\u0112\n",
    "\r\u0003\u000e\u0003\u000e\u0005\u000e\u0116\n\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u011a\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0122\n\u000e\f\u000e",
    "\u000e\u000e\u0125\u000b\u000e\u0003\u000e\u0005\u000e\u0128\n\u000e",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u012c\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0131\n\u000f\u0003\u0010\u0005\u0010",
    "\u0134\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0138\n\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u013c\n\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u0141\n\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u0145\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0006\u0014\u014e\n\u0014\r\u0014",
    "\u000e\u0014\u014f\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0007\u0018\u015f\n\u0018\f\u0018\u000e",
    "\u0018\u0162\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0167\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u016d\n\u0018\u0003\u0018\u0005\u0018\u0170\n\u0018\u0003\u0018",
    "\u0005\u0018\u0173\n\u0018\u0003\u0019\u0006\u0019\u0176\n\u0019\r\u0019",
    "\u000e\u0019\u0177\u0003\u0019\u0005\u0019\u017b\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0182\n",
    "\u001a\u0003\u001b\u0005\u001b\u0185\n\u001b\u0003\u001b\u0007\u001b",
    "\u0188\n\u001b\f\u001b\u000e\u001b\u018b\u000b\u001b\u0003\u001b\u0005",
    "\u001b\u018e\n\u001b\u0003\u001b\u0006\u001b\u0191\n\u001b\r\u001b\u000e",
    "\u001b\u0192\u0003\u001b\u0006\u001b\u0196\n\u001b\r\u001b\u000e\u001b",
    "\u0197\u0003\u001b\u0003\u001b\u0005\u001b\u019c\n\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u01a0\n\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u01a4\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01a8\n\u001b",
    "\u0007\u001b\u01aa\n\u001b\f\u001b\u000e\u001b\u01ad\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u01b1\n\u001b\u0003\u001b\u0003\u001b",
    "\u0006\u001b\u01b5\n\u001b\r\u001b\u000e\u001b\u01b6\u0003\u001b\u0005",
    "\u001b\u01ba\n\u001b\u0003\u001b\u0005\u001b\u01bd\n\u001b\u0003\u001b",
    "\u0005\u001b\u01c0\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u01c6\n\u001c\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u01ca\n\u001d\f\u001d\u000e\u001d\u01cd\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u01d2\n\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u01d7\n\u001d\u0003\u001d\u0005\u001d\u01da",
    "\n\u001d\u0003\u001d\u0005\u001d\u01dd\n\u001d\u0003\u001e\u0006\u001e",
    "\u01e0\n\u001e\r\u001e\u000e\u001e\u01e1\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u01e6\n\u001f\f\u001f\u000e\u001f\u01e9\u000b\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u01ed\n\u001f\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u01f1\n\u001f\u0003\u001f\u0005\u001f\u01f4\n\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u01f8\n\u001f\u0003\u001f\u0005\u001f\u01fb",
    "\n\u001f\u0003 \u0006 \u01fe\n \r \u000e \u01ff\u0003!\u0007!\u0203",
    "\n!\f!\u000e!\u0206\u000b!\u0003!\u0006!\u0209\n!\r!\u000e!\u020a\u0003",
    "!\u0006!\u020e\n!\r!\u000e!\u020f\u0003!\u0003!\u0005!\u0214\n!\u0003",
    "!\u0003!\u0005!\u0218\n!\u0003!\u0003!\u0005!\u021c\n!\u0003!\u0003",
    "!\u0005!\u0220\n!\u0007!\u0222\n!\f!\u000e!\u0225\u000b!\u0003!\u0003",
    "!\u0003!\u0006!\u022a\n!\r!\u000e!\u022b\u0003!\u0005!\u022f\n!\u0003",
    "!\u0005!\u0232\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u023d\n\"\u0003#\u0003#\u0005#\u0241\n#\u0003",
    "#\u0005#\u0244\n#\u0003$\u0005$\u0247\n$\u0003$\u0005$\u024a\n$\u0003",
    "$\u0003$\u0003%\u0003%\u0003%\u0005%\u0251\n%\u0003%\u0003%\u0003%\u0003",
    "%\u0005%\u0257\n%\u0003%\u0003%\u0005%\u025b\n%\u0003%\u0005%\u025e",
    "\n%\u0003%\u0005%\u0261\n%\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003",
    "\'\u0007\'\u0269\n\'\f\'\u000e\'\u026c\u000b\'\u0003\'\u0003\'\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0276\n(\u0003)\u0003)\u0003",
    "*\u0003*\u0003+\u0003+\u0003+\u0005+\u027f\n+\u0003+\u0003+\u0005+\u0283",
    "\n+\u0003,\u0003,\u0003,\u0003,\u0005,\u0289\n,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0005,\u0290\n,\u0006,\u0292\n,\r,\u000e,\u0293\u0003",
    "-\u0003-\u0003-\u0005-\u0299\n-\u0003-\u0007-\u029c\n-\f-\u000e-\u029f",
    "\u000b-\u0003.\u0003.\u0003/\u0003/\u0003/\u0007/\u02a6\n/\f/\u000e",
    "/\u02a9\u000b/\u00030\u00050\u02ac\n0\u00030\u00060\u02af\n0\r0\u000e",
    "0\u02b0\u00030\u00050\u02b4\n0\u00030\u00030\u00050\u02b8\n0\u00031",
    "\u00071\u02bb\n1\f1\u000e1\u02be\u000b1\u00032\u00072\u02c1\n2\f2\u000e",
    "2\u02c4\u000b2\u00033\u00073\u02c7\n3\f3\u000e3\u02ca\u000b3\u00034",
    "\u00074\u02cd\n4\f4\u000e4\u02d0\u000b4\u00034\u00074\u02d3\n4\f4\u000e",
    "4\u02d6\u000b4\u00034\u00054\u02d9\n4\u00035\u00035\u00035\u00035\u0003",
    "5\u00055\u02e0\n5\u00035\u00035\u00055\u02e4\n5\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u02eb\n6\u00037\u00057\u02ee\n7\u00037\u0003",
    "7\u00037\u00057\u02f3\n7\u00037\u00057\u02f6\n7\u00037\u00057\u02f9",
    "\n7\u00077\u02fb\n7\f7\u000e7\u02fe\u000b7\u00037\u00037\u00057\u0302",
    "\n7\u00037\u00057\u0305\n7\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00068\u030d\n8\r8\u000e8\u030e\u00038\u00038\u00038\u00068\u0314",
    "\n8\r8\u000e8\u0315\u00038\u00038\u00058\u031a\n8\u00039\u00039\u0003",
    "9\u00059\u031f\n9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0005",
    "9\u0328\n9\u0003:\u0003:\u0003:\u0006:\u032d\n:\r:\u000e:\u032e\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0005;\u0336\n;\u0003;\u0005;\u0339\n",
    ";\u0003<\u0003<\u0003<\u0002\u0002=\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnprtv\u0002\u0007\u0004\u0002\n\r??\u0003\u0002:;\u0003",
    "\u0002:<\u0003\u0002#&\u0004\u0002/69>\u0002\u03bc\u0002x\u0003\u0002",
    "\u0002\u0002\u0004\u0086\u0003\u0002\u0002\u0002\u0006\u00b9\u0003\u0002",
    "\u0002\u0002\b\u00bc\u0003\u0002\u0002\u0002\n\u00d8\u0003\u0002\u0002",
    "\u0002\f\u00da\u0003\u0002\u0002\u0002\u000e\u00e9\u0003\u0002\u0002",
    "\u0002\u0010\u00ec\u0003\u0002\u0002\u0002\u0012\u00ee\u0003\u0002\u0002",
    "\u0002\u0014\u00f0\u0003\u0002\u0002\u0002\u0016\u00f2\u0003\u0002\u0002",
    "\u0002\u0018\u010b\u0003\u0002\u0002\u0002\u001a\u0113\u0003\u0002\u0002",
    "\u0002\u001c\u0130\u0003\u0002\u0002\u0002\u001e\u0133\u0003\u0002\u0002",
    "\u0002 \u0144\u0003\u0002\u0002\u0002\"\u0146\u0003\u0002\u0002\u0002",
    "$\u0148\u0003\u0002\u0002\u0002&\u014b\u0003\u0002\u0002\u0002(\u0153",
    "\u0003\u0002\u0002\u0002*\u0157\u0003\u0002\u0002\u0002,\u015a\u0003",
    "\u0002\u0002\u0002.\u0160\u0003\u0002\u0002\u00020\u017a\u0003\u0002",
    "\u0002\u00022\u0181\u0003\u0002\u0002\u00024\u01bf\u0003\u0002\u0002",
    "\u00026\u01c5\u0003\u0002\u0002\u00028\u01cb\u0003\u0002\u0002\u0002",
    ":\u01df\u0003\u0002\u0002\u0002<\u01e7\u0003\u0002\u0002\u0002>\u01fd",
    "\u0003\u0002\u0002\u0002@\u0231\u0003\u0002\u0002\u0002B\u023c\u0003",
    "\u0002\u0002\u0002D\u023e\u0003\u0002\u0002\u0002F\u0246\u0003\u0002",
    "\u0002\u0002H\u0250\u0003\u0002\u0002\u0002J\u0262\u0003\u0002\u0002",
    "\u0002L\u0266\u0003\u0002\u0002\u0002N\u026f\u0003\u0002\u0002\u0002",
    "P\u0277\u0003\u0002\u0002\u0002R\u0279\u0003\u0002\u0002\u0002T\u027b",
    "\u0003\u0002\u0002\u0002V\u0288\u0003\u0002\u0002\u0002X\u0295\u0003",
    "\u0002\u0002\u0002Z\u02a0\u0003\u0002\u0002\u0002\\\u02a2\u0003\u0002",
    "\u0002\u0002^\u02ab\u0003\u0002\u0002\u0002`\u02bc\u0003\u0002\u0002",
    "\u0002b\u02c2\u0003\u0002\u0002\u0002d\u02c8\u0003\u0002\u0002\u0002",
    "f\u02d8\u0003\u0002\u0002\u0002h\u02e3\u0003\u0002\u0002\u0002j\u02ea",
    "\u0003\u0002\u0002\u0002l\u02ed\u0003\u0002\u0002\u0002n\u0319\u0003",
    "\u0002\u0002\u0002p\u0327\u0003\u0002\u0002\u0002r\u032c\u0003\u0002",
    "\u0002\u0002t\u0330\u0003\u0002\u0002\u0002v\u033a\u0003\u0002\u0002",
    "\u0002x{\u0007\u0003\u0002\u0002y|\u00078\u0002\u0002z|\u0005\u0004",
    "\u0003\u0002{y\u0003\u0002\u0002\u0002{z\u0003\u0002\u0002\u0002|}\u0003",
    "\u0002\u0002\u0002}~\u0007\u0004\u0002\u0002~\u0003\u0003\u0002\u0002",
    "\u0002\u007f\u0085\u0005\u001a\u000e\u0002\u0080\u0085\u0005H%\u0002",
    "\u0081\u0085\u0005\u0016\f\u0002\u0082\u0085\u0005\u0006\u0004\u0002",
    "\u0083\u0085\u00078\u0002\u0002\u0084\u007f\u0003\u0002\u0002\u0002",
    "\u0084\u0080\u0003\u0002\u0002\u0002\u0084\u0081\u0003\u0002\u0002\u0002",
    "\u0084\u0082\u0003\u0002\u0002\u0002\u0084\u0083\u0003\u0002\u0002\u0002",
    "\u0085\u0088\u0003\u0002\u0002\u0002\u0086\u0084\u0003\u0002\u0002\u0002",
    "\u0086\u0087\u0003\u0002\u0002\u0002\u0087\u0005\u0003\u0002\u0002\u0002",
    "\u0088\u0086\u0003\u0002\u0002\u0002\u0089\u008b\u00070\u0002\u0002",
    "\u008a\u008c\u0007A\u0002\u0002\u008b\u008a\u0003\u0002\u0002\u0002",
    "\u008b\u008c\u0003\u0002\u0002\u0002\u008c\u008d\u0003\u0002\u0002\u0002",
    "\u008d\u008f\u0005\u0010\t\u0002\u008e\u0090\u0007A\u0002\u0002\u008f",
    "\u008e\u0003\u0002\u0002\u0002\u008f\u0090\u0003\u0002\u0002\u0002\u0090",
    "\u0091\u0003\u0002\u0002\u0002\u0091\u0093\u0007\u0005\u0002\u0002\u0092",
    "\u0094\u0007A\u0002\u0002\u0093\u0092\u0003\u0002\u0002\u0002\u0093",
    "\u0094\u0003\u0002\u0002\u0002\u0094\u0095\u0003\u0002\u0002\u0002\u0095",
    "\u0097\u0005\u0012\n\u0002\u0096\u0098\u0007A\u0002\u0002\u0097\u0096",
    "\u0003\u0002\u0002\u0002\u0097\u0098\u0003\u0002\u0002\u0002\u0098\u0099",
    "\u0003\u0002\u0002\u0002\u0099\u009b\u0007?\u0002\u0002\u009a\u009c",
    "\u0007A\u0002\u0002\u009b\u009a\u0003\u0002\u0002\u0002\u009b\u009c",
    "\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002\u0002\u009d\u009e",
    "\u0005\b\u0005\u0002\u009e\u00ba\u0003\u0002\u0002\u0002\u009f\u00a1",
    "\u00070\u0002\u0002\u00a0\u00a2\u0007A\u0002\u0002\u00a1\u00a0\u0003",
    "\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003",
    "\u0002\u0002\u0002\u00a3\u00a5\u0005\b\u0005\u0002\u00a4\u00a6\u0007",
    "A\u0002\u0002\u00a5\u00a4\u0003\u0002\u0002\u0002\u00a5\u00a6\u0003",
    "\u0002\u0002\u0002\u00a6\u00a7\u0003\u0002\u0002\u0002\u00a7\u00a8\u0007",
    "6\u0002\u0002\u00a8\u00a9\u0005\u0014\u000b\u0002\u00a9\u00ba\u0003",
    "\u0002\u0002\u0002\u00aa\u00ac\u00070\u0002\u0002\u00ab\u00ad\u0007",
    "A\u0002\u0002\u00ac\u00ab\u0003\u0002\u0002\u0002\u00ac\u00ad\u0003",
    "\u0002\u0002\u0002\u00ad\u00ae\u0003\u0002\u0002\u0002\u00ae\u00af\u0007",
    "6\u0002\u0002\u00af\u00b1\u0005\u0014\u000b\u0002\u00b0\u00b2\u0007",
    "8\u0002\u0002\u00b1\u00b0\u0003\u0002\u0002\u0002\u00b1\u00b2\u0003",
    "\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002\u0002\u0002\u00b3\u00b5\u0005",
    "\u000e\b\u0002\u00b4\u00b6\u00078\u0002\u0002\u00b5\u00b4\u0003\u0002",
    "\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002",
    "\u0002\u0002\u00b7\u00b8\u0007\u0006\u0002\u0002\u00b8\u00ba\u0003\u0002",
    "\u0002\u0002\u00b9\u0089\u0003\u0002\u0002\u0002\u00b9\u009f\u0003\u0002",
    "\u0002\u0002\u00b9\u00aa\u0003\u0002\u0002\u0002\u00ba\u0007\u0003\u0002",
    "\u0002\u0002\u00bb\u00bd\u0007B\u0002\u0002\u00bc\u00bb\u0003\u0002",
    "\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd\u00c6\u0003\u0002",
    "\u0002\u0002\u00be\u00c3\u0005\n\u0006\u0002\u00bf\u00c0\u0007A\u0002",
    "\u0002\u00c0\u00c2\u0005\n\u0006\u0002\u00c1\u00bf\u0003\u0002\u0002",
    "\u0002\u00c2\u00c5\u0003\u0002\u0002\u0002\u00c3\u00c1\u0003\u0002\u0002",
    "\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c7\u0003\u0002\u0002",
    "\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c6\u00be\u0003\u0002\u0002",
    "\u0002\u00c7\u00c8\u0003\u0002\u0002\u0002\u00c8\u00c6\u0003\u0002\u0002",
    "\u0002\u00c8\u00c9\u0003\u0002\u0002\u0002\u00c9\u00cb\u0003\u0002\u0002",
    "\u0002\u00ca\u00cc\u0007B\u0002\u0002\u00cb\u00ca\u0003\u0002\u0002",
    "\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc\t\u0003\u0002\u0002",
    "\u0002\u00cd\u00d9\u0007<\u0002\u0002\u00ce\u00cf\u0007\u0007\u0002",
    "\u0002\u00cf\u00d0\u0007<\u0002\u0002\u00d0\u00d9\u0007\b\u0002\u0002",
    "\u00d1\u00d2\u0007\t\u0002\u0002\u00d2\u00d3\u0007<\u0002\u0002\u00d3",
    "\u00d9\u0007\b\u0002\u0002\u00d4\u00d5\u0007<\u0002\u0002\u00d5\u00d9",
    "\t\u0002\u0002\u0002\u00d6\u00d9\u00070\u0002\u0002\u00d7\u00d9\u0005",
    "v<\u0002\u00d8\u00cd\u0003\u0002\u0002\u0002\u00d8\u00ce\u0003\u0002",
    "\u0002\u0002\u00d8\u00d1\u0003\u0002\u0002\u0002\u00d8\u00d4\u0003\u0002",
    "\u0002\u0002\u00d8\u00d6\u0003\u0002\u0002\u0002\u00d8\u00d7\u0003\u0002",
    "\u0002\u0002\u00d9\u000b\u0003\u0002\u0002\u0002\u00da\u00db\u00078",
    "\u0002\u0002\u00db\r\u0003\u0002\u0002\u0002\u00dc\u00de\u0005\f\u0007",
    "\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00dd\u00de\u0003\u0002\u0002",
    "\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e4\u0005\n\u0006",
    "\u0002\u00e0\u00e1\u0007A\u0002\u0002\u00e1\u00e3\u0005\n\u0006\u0002",
    "\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e3\u00e6\u0003\u0002\u0002\u0002",
    "\u00e4\u00e2\u0003\u0002\u0002\u0002\u00e4\u00e5\u0003\u0002\u0002\u0002",
    "\u00e5\u00e8\u0003\u0002\u0002\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002",
    "\u00e7\u00dd\u0003\u0002\u0002\u0002\u00e8\u00eb\u0003\u0002\u0002\u0002",
    "\u00e9\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002",
    "\u00ea\u000f\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002",
    "\u00ec\u00ed\u0007/\u0002\u0002\u00ed\u0011\u0003\u0002\u0002\u0002",
    "\u00ee\u00ef\u0007<\u0002\u0002\u00ef\u0013\u0003\u0002\u0002\u0002",
    "\u00f0\u00f1\u0007<\u0002\u0002\u00f1\u0015\u0003\u0002\u0002\u0002",
    "\u00f2\u00f4\u00075\u0002\u0002\u00f3\u00f5\u0007A\u0002\u0002\u00f4",
    "\u00f3\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003\u0002\u0002\u0002\u00f5",
    "\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f7\u0007B\u0002\u0002\u00f7",
    "\u00f8\u0005\u0018\r\u0002\u00f8\u00fa\u0007B\u0002\u0002\u00f9\u00fb",
    "\u0007A\u0002\u0002\u00fa\u00f9\u0003\u0002\u0002\u0002\u00fa\u00fb",
    "\u0003\u0002\u0002\u0002\u00fb\u0109\u0003\u0002\u0002\u0002\u00fc\u0105",
    "\u0007\u000e\u0002\u0002\u00fd\u0104\u0005\u001a\u000e\u0002\u00fe\u0104",
    "\u0005H%\u0002\u00ff\u0104\u0005&\u0014\u0002\u0100\u0104\u0005\u0016",
    "\f\u0002\u0101\u0104\u0005\u0006\u0004\u0002\u0102\u0104\u00078\u0002",
    "\u0002\u0103\u00fd\u0003\u0002\u0002\u0002\u0103\u00fe\u0003\u0002\u0002",
    "\u0002\u0103\u00ff\u0003\u0002\u0002\u0002\u0103\u0100\u0003\u0002\u0002",
    "\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0103\u0102\u0003\u0002\u0002",
    "\u0002\u0104\u0107\u0003\u0002\u0002\u0002\u0105\u0103\u0003\u0002\u0002",
    "\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106\u0108\u0003\u0002\u0002",
    "\u0002\u0107\u0105\u0003\u0002\u0002\u0002\u0108\u010a\u0007\u000f\u0002",
    "\u0002\u0109\u00fc\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002",
    "\u0002\u010a\u0017\u0003\u0002\u0002\u0002\u010b\u0111\u0007<\u0002",
    "\u0002\u010c\u010e\u0007?\u0002\u0002\u010d\u010f\u0007A\u0002\u0002",
    "\u010e\u010d\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002",
    "\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0112\u0007<\u0002\u0002",
    "\u0111\u010c\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002\u0002\u0002",
    "\u0112\u0019\u0003\u0002\u0002\u0002\u0113\u0115\u0005\u001c\u000f\u0002",
    "\u0114\u0116\u0007A\u0002\u0002\u0115\u0114\u0003\u0002\u0002\u0002",
    "\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002\u0002\u0002",
    "\u0117\u0119\u0005\u001e\u0010\u0002\u0118\u011a\u0007A\u0002\u0002",
    "\u0119\u0118\u0003\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002",
    "\u011a\u0127\u0003\u0002\u0002\u0002\u011b\u0123\u0007\u000e\u0002\u0002",
    "\u011c\u0122\u0005.\u0018\u0002\u011d\u0122\u00058\u001d\u0002\u011e",
    "\u0122\u0005<\u001f\u0002\u011f\u0122\u0005&\u0014\u0002\u0120\u0122",
    "\u00078\u0002\u0002\u0121\u011c\u0003\u0002\u0002\u0002\u0121\u011d",
    "\u0003\u0002\u0002\u0002\u0121\u011e\u0003\u0002\u0002\u0002\u0121\u011f",
    "\u0003\u0002\u0002\u0002\u0121\u0120\u0003\u0002\u0002\u0002\u0122\u0125",
    "\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0123\u0124",
    "\u0003\u0002\u0002\u0002\u0124\u0126\u0003\u0002\u0002\u0002\u0125\u0123",
    "\u0003\u0002\u0002\u0002\u0126\u0128\u0007\u000f\u0002\u0002\u0127\u011b",
    "\u0003\u0002\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u001b",
    "\u0003\u0002\u0002\u0002\u0129\u012b\u00073\u0002\u0002\u012a\u012c",
    "\u00071\u0002\u0002\u012b\u012a\u0003\u0002\u0002\u0002\u012b\u012c",
    "\u0003\u0002\u0002\u0002\u012c\u0131\u0003\u0002\u0002\u0002\u012d\u0131",
    "\u00071\u0002\u0002\u012e\u0131\u00072\u0002\u0002\u012f\u0131\u0007",
    "4\u0002\u0002\u0130\u0129\u0003\u0002\u0002\u0002\u0130\u012d\u0003",
    "\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0130\u012f\u0003",
    "\u0002\u0002\u0002\u0131\u001d\u0003\u0002\u0002\u0002\u0132\u0134\u0007",
    "B\u0002\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0133\u0134\u0003",
    "\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0137\u0005",
    " \u0011\u0002\u0136\u0138\u0007B\u0002\u0002\u0137\u0136\u0003\u0002",
    "\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u013b\u0003\u0002",
    "\u0002\u0002\u0139\u013a\u00076\u0002\u0002\u013a\u013c\u0005\"\u0012",
    "\u0002\u013b\u0139\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002",
    "\u0002\u013c\u001f\u0003\u0002\u0002\u0002\u013d\u013e\u0007<\u0002",
    "\u0002\u013e\u0140\u0007?\u0002\u0002\u013f\u0141\u0007A\u0002\u0002",
    "\u0140\u013f\u0003\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u0145\u0007<\u0002\u0002",
    "\u0143\u0145\u0007<\u0002\u0002\u0144\u013d\u0003\u0002\u0002\u0002",
    "\u0144\u0143\u0003\u0002\u0002\u0002\u0145!\u0003\u0002\u0002\u0002",
    "\u0146\u0147\u0007<\u0002\u0002\u0147#\u0003\u0002\u0002\u0002\u0148",
    "\u0149\u0007\u0010\u0002\u0002\u0149\u014a\u0005^0\u0002\u014a%\u0003",
    "\u0002\u0002\u0002\u014b\u014d\u0007\u0011\u0002\u0002\u014c\u014e\u0005",
    "(\u0015\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014e\u014f\u0003",
    "\u0002\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u0152\u0007",
    "\u0011\u0002\u0002\u0152\'\u0003\u0002\u0002\u0002\u0153\u0154\u0005",
    "*\u0016\u0002\u0154\u0155\u0005,\u0017\u0002\u0155\u0156\u0007\u0012",
    "\u0002\u0002\u0156)\u0003\u0002\u0002\u0002\u0157\u0158\u0007<\u0002",
    "\u0002\u0158\u0159\u0007?\u0002\u0002\u0159+\u0003\u0002\u0002\u0002",
    "\u015a\u015b\t\u0003\u0002\u0002\u015b-\u0003\u0002\u0002\u0002\u015c",
    "\u015f\u0005R*\u0002\u015d\u015f\u0005j6\u0002\u015e\u015c\u0003\u0002",
    "\u0002\u0002\u015e\u015d\u0003\u0002\u0002\u0002\u015f\u0162\u0003\u0002",
    "\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002",
    "\u0002\u0002\u0161\u0163\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002",
    "\u0002\u0002\u0163\u0164\u00050\u0019\u0002\u0164\u0166\u0007?\u0002",
    "\u0002\u0165\u0167\u0007A\u0002\u0002\u0166\u0165\u0003\u0002\u0002",
    "\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002",
    "\u0002\u0168\u0169\u00052\u001a\u0002\u0169\u016f\u0003\u0002\u0002",
    "\u0002\u016a\u016c\u0007\u0013\u0002\u0002\u016b\u016d\u0007A\u0002",
    "\u0002\u016c\u016b\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002",
    "\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u0170\u00054\u001b",
    "\u0002\u016f\u016a\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002",
    "\u0002\u0170\u0172\u0003\u0002\u0002\u0002\u0171\u0173\u00078\u0002",
    "\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002",
    "\u0002\u0173/\u0003\u0002\u0002\u0002\u0174\u0176\u0007<\u0002\u0002",
    "\u0175\u0174\u0003\u0002\u0002\u0002\u0176\u0177\u0003\u0002\u0002\u0002",
    "\u0177\u0175\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002",
    "\u0178\u017b\u0003\u0002\u0002\u0002\u0179\u017b\u00079\u0002\u0002",
    "\u017a\u0175\u0003\u0002\u0002\u0002\u017a\u0179\u0003\u0002\u0002\u0002",
    "\u017b1\u0003\u0002\u0002\u0002\u017c\u0182\u0005b2\u0002\u017d\u0182",
    "\u00079\u0002\u0002\u017e\u0182\u0007>\u0002\u0002\u017f\u0182\u0007",
    "=\u0002\u0002\u0180\u0182\u0005V,\u0002\u0181\u017c\u0003\u0002\u0002",
    "\u0002\u0181\u017d\u0003\u0002\u0002\u0002\u0181\u017e\u0003\u0002\u0002",
    "\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0180\u0003\u0002\u0002",
    "\u0002\u01823\u0003\u0002\u0002\u0002\u0183\u0185\u0007B\u0002\u0002",
    "\u0184\u0183\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002",
    "\u0185\u0189\u0003\u0002\u0002\u0002\u0186\u0188\u0007<\u0002\u0002",
    "\u0187\u0186\u0003\u0002\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002",
    "\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002",
    "\u018a\u018d\u0003\u0002\u0002\u0002\u018b\u0189\u0003\u0002\u0002\u0002",
    "\u018c\u018e\u0007B\u0002\u0002\u018d\u018c\u0003\u0002\u0002\u0002",
    "\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u01c0\u0003\u0002\u0002\u0002",
    "\u018f\u0191\u0007:\u0002\u0002\u0190\u018f\u0003\u0002\u0002\u0002",
    "\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0190\u0003\u0002\u0002\u0002",
    "\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u01c0\u0003\u0002\u0002\u0002",
    "\u0194\u0196\u0007;\u0002\u0002\u0195\u0194\u0003\u0002\u0002\u0002",
    "\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002\u0002",
    "\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u01c0\u0003\u0002\u0002\u0002",
    "\u0199\u019b\u0007\u0014\u0002\u0002\u019a\u019c\u0007B\u0002\u0002",
    "\u019b\u019a\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002",
    "\u019c\u019d\u0003\u0002\u0002\u0002\u019d\u019f\t\u0004\u0002\u0002",
    "\u019e\u01a0\u0007B\u0002\u0002\u019f\u019e\u0003\u0002\u0002\u0002",
    "\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01ab\u0003\u0002\u0002\u0002",
    "\u01a1\u01a3\u0007\u000b\u0002\u0002\u01a2\u01a4\u0007B\u0002\u0002",
    "\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002",
    "\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7\t\u0004\u0002\u0002",
    "\u01a6\u01a8\u0007B\u0002\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002",
    "\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01aa\u0003\u0002\u0002\u0002",
    "\u01a9\u01a1\u0003\u0002\u0002\u0002\u01aa\u01ad\u0003\u0002\u0002\u0002",
    "\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002",
    "\u01ac\u01ae\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002",
    "\u01ae\u01c0\u0007\u0015\u0002\u0002\u01af\u01b1\u0007B\u0002\u0002",
    "\u01b0\u01af\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002",
    "\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b4\u0007<\u0002\u0002",
    "\u01b3\u01b5\u0007:\u0002\u0002\u01b4\u01b3\u0003\u0002\u0002\u0002",
    "\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b4\u0003\u0002\u0002\u0002",
    "\u01b6\u01b7\u0003\u0002\u0002\u0002\u01b7\u01b9\u0003\u0002\u0002\u0002",
    "\u01b8\u01ba\u0007<\u0002\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01bc\u0003\u0002\u0002\u0002",
    "\u01bb\u01bd\u0007B\u0002\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002",
    "\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01c0\u0003\u0002\u0002\u0002",
    "\u01be\u01c0\u0007\u0016\u0002\u0002\u01bf\u0184\u0003\u0002\u0002\u0002",
    "\u01bf\u0190\u0003\u0002\u0002\u0002\u01bf\u0195\u0003\u0002\u0002\u0002",
    "\u01bf\u0199\u0003\u0002\u0002\u0002\u01bf\u01b0\u0003\u0002\u0002\u0002",
    "\u01bf\u01be\u0003\u0002\u0002\u0002\u01c05\u0003\u0002\u0002\u0002",
    "\u01c1\u01c6\u0005b2\u0002\u01c2\u01c6\u00079\u0002\u0002\u01c3\u01c6",
    "\u0007>\u0002\u0002\u01c4\u01c6\u0007=\u0002\u0002\u01c5\u01c1\u0003",
    "\u0002\u0002\u0002\u01c5\u01c2\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003",
    "\u0002\u0002\u0002\u01c5\u01c4\u0003\u0002\u0002\u0002\u01c67\u0003",
    "\u0002\u0002\u0002\u01c7\u01ca\u0005R*\u0002\u01c8\u01ca\u0005j6\u0002",
    "\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002",
    "\u01ca\u01cd\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002",
    "\u01cb\u01cc\u0003\u0002\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002",
    "\u01cd\u01cb\u0003\u0002\u0002\u0002\u01ce\u01cf\u0005:\u001e\u0002",
    "\u01cf\u01d1\u0007\u0017\u0002\u0002\u01d0\u01d2\u0005X-\u0002\u01d1",
    "\u01d0\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2",
    "\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d9\u0007\u0018\u0002\u0002\u01d4",
    "\u01d6\u0007?\u0002\u0002\u01d5\u01d7\u0007A\u0002\u0002\u01d6\u01d5",
    "\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d8",
    "\u0003\u0002\u0002\u0002\u01d8\u01da\u0005`1\u0002\u01d9\u01d4\u0003",
    "\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da\u01dc\u0003",
    "\u0002\u0002\u0002\u01db\u01dd\u00078\u0002\u0002\u01dc\u01db\u0003",
    "\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd9\u0003",
    "\u0002\u0002\u0002\u01de\u01e0\u0007<\u0002\u0002\u01df\u01de\u0003",
    "\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01df\u0003",
    "\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2;\u0003",
    "\u0002\u0002\u0002\u01e3\u01e6\u0005R*\u0002\u01e4\u01e6\u0005j6\u0002",
    "\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002",
    "\u01e6\u01e9\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002",
    "\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ea\u0003\u0002\u0002\u0002",
    "\u01e9\u01e7\u0003\u0002\u0002\u0002\u01ea\u01ec\u0005> \u0002\u01eb",
    "\u01ed\u0007A\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec",
    "\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee",
    "\u01f0\u0007\u0013\u0002\u0002\u01ef\u01f1\u0007A\u0002\u0002\u01f0",
    "\u01ef\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1",
    "\u01f3\u0003\u0002\u0002\u0002\u01f2\u01f4\u0007B\u0002\u0002\u01f3",
    "\u01f2\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4",
    "\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f7\u0005@!\u0002\u01f6\u01f8",
    "\u0007B\u0002\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f7\u01f8",
    "\u0003\u0002\u0002\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01fb",
    "\u00078\u0002\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fa\u01fb",
    "\u0003\u0002\u0002\u0002\u01fb=\u0003\u0002\u0002\u0002\u01fc\u01fe",
    "\u0007<\u0002\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fe\u01ff",
    "\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200",
    "\u0003\u0002\u0002\u0002\u0200?\u0003\u0002\u0002\u0002\u0201\u0203",
    "\u0007<\u0002\u0002\u0202\u0201\u0003\u0002\u0002\u0002\u0203\u0206",
    "\u0003\u0002\u0002\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0205",
    "\u0003\u0002\u0002\u0002\u0205\u0232\u0003\u0002\u0002\u0002\u0206\u0204",
    "\u0003\u0002\u0002\u0002\u0207\u0209\u0007:\u0002\u0002\u0208\u0207",
    "\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u0208",
    "\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002\u020b\u0232",
    "\u0003\u0002\u0002\u0002\u020c\u020e\u0007;\u0002\u0002\u020d\u020c",
    "\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u020d",
    "\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0232",
    "\u0003\u0002\u0002\u0002\u0211\u0213\u0007\u0014\u0002\u0002\u0212\u0214",
    "\u0007B\u0002\u0002\u0213\u0212\u0003\u0002\u0002\u0002\u0213\u0214",
    "\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0217",
    "\t\u0004\u0002\u0002\u0216\u0218\u0007B\u0002\u0002\u0217\u0216\u0003",
    "\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u0223\u0003",
    "\u0002\u0002\u0002\u0219\u021b\u0007\u000b\u0002\u0002\u021a\u021c\u0007",
    "B\u0002\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021b\u021c\u0003",
    "\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u021f\t",
    "\u0004\u0002\u0002\u021e\u0220\u0007B\u0002\u0002\u021f\u021e\u0003",
    "\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003",
    "\u0002\u0002\u0002\u0221\u0219\u0003\u0002\u0002\u0002\u0222\u0225\u0003",
    "\u0002\u0002\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0223\u0224\u0003",
    "\u0002\u0002\u0002\u0224\u0226\u0003\u0002\u0002\u0002\u0225\u0223\u0003",
    "\u0002\u0002\u0002\u0226\u0232\u0007\u0015\u0002\u0002\u0227\u0229\u0007",
    "<\u0002\u0002\u0228\u022a\u0007:\u0002\u0002\u0229\u0228\u0003\u0002",
    "\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002",
    "\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u022e\u0003\u0002",
    "\u0002\u0002\u022d\u022f\u0007<\u0002\u0002\u022e\u022d\u0003\u0002",
    "\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0232\u0003\u0002",
    "\u0002\u0002\u0230\u0232\u0007\u0016\u0002\u0002\u0231\u0204\u0003\u0002",
    "\u0002\u0002\u0231\u0208\u0003\u0002\u0002\u0002\u0231\u020d\u0003\u0002",
    "\u0002\u0002\u0231\u0211\u0003\u0002\u0002\u0002\u0231\u0227\u0003\u0002",
    "\u0002\u0002\u0231\u0230\u0003\u0002\u0002\u0002\u0232A\u0003\u0002",
    "\u0002\u0002\u0233\u023d\u0007\u0019\u0002\u0002\u0234\u023d\u0007\u001a",
    "\u0002\u0002\u0235\u023d\u0007\u001b\u0002\u0002\u0236\u023d\u0007\u001c",
    "\u0002\u0002\u0237\u023d\u0007\u001d\u0002\u0002\u0238\u023d\u0007\u001e",
    "\u0002\u0002\u0239\u023a\u0007B\u0002\u0002\u023a\u023b\u0007:\u0002",
    "\u0002\u023b\u023d\u0007B\u0002\u0002\u023c\u0233\u0003\u0002\u0002",
    "\u0002\u023c\u0234\u0003\u0002\u0002\u0002\u023c\u0235\u0003\u0002\u0002",
    "\u0002\u023c\u0236\u0003\u0002\u0002\u0002\u023c\u0237\u0003\u0002\u0002",
    "\u0002\u023c\u0238\u0003\u0002\u0002\u0002\u023c\u0239\u0003\u0002\u0002",
    "\u0002\u023dC\u0003\u0002\u0002\u0002\u023e\u0240\u0005h5\u0002\u023f",
    "\u0241\u0007A\u0002\u0002\u0240\u023f\u0003\u0002\u0002\u0002\u0240",
    "\u0241\u0003\u0002\u0002\u0002\u0241\u0243\u0003\u0002\u0002\u0002\u0242",
    "\u0244\u0005B\"\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0243\u0244",
    "\u0003\u0002\u0002\u0002\u0244E\u0003\u0002\u0002\u0002\u0245\u0247",
    "\u0005B\"\u0002\u0246\u0245\u0003\u0002\u0002\u0002\u0246\u0247\u0003",
    "\u0002\u0002\u0002\u0247\u0249\u0003\u0002\u0002\u0002\u0248\u024a\u0007",
    "A\u0002\u0002\u0249\u0248\u0003\u0002\u0002\u0002\u0249\u024a\u0003",
    "\u0002\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0005",
    "h5\u0002\u024cG\u0003\u0002\u0002\u0002\u024d\u024e\u0005J&\u0002\u024e",
    "\u024f\u00078\u0002\u0002\u024f\u0251\u0003\u0002\u0002\u0002\u0250",
    "\u024d\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251",
    "\u0252\u0003\u0002\u0002\u0002\u0252\u0253\u0005D#\u0002\u0253\u0254",
    "\u0005P)\u0002\u0254\u025d\u0005F$\u0002\u0255\u0257\u0007A\u0002\u0002",
    "\u0256\u0255\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002",
    "\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u025a\u0007?\u0002\u0002",
    "\u0259\u025b\u0007A\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002",
    "\u025a\u025b\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002",
    "\u025c\u025e\u0005l7\u0002\u025d\u0256\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u0003\u0002\u0002\u0002\u025e\u0260\u0003\u0002\u0002\u0002\u025f",
    "\u0261\u00078\u0002\u0002\u0260\u025f\u0003\u0002\u0002\u0002\u0260",
    "\u0261\u0003\u0002\u0002\u0002\u0261I\u0003\u0002\u0002\u0002\u0262",
    "\u0263\u0007\u001f\u0002\u0002\u0263\u0264\u0005L\'\u0002\u0264\u0265",
    "\u0007 \u0002\u0002\u0265K\u0003\u0002\u0002\u0002\u0266\u026a\u0007",
    "\u0014\u0002\u0002\u0267\u0269\u0005N(\u0002\u0268\u0267\u0003\u0002",
    "\u0002\u0002\u0269\u026c\u0003\u0002\u0002\u0002\u026a\u0268\u0003\u0002",
    "\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026d\u0003\u0002",
    "\u0002\u0002\u026c\u026a\u0003\u0002\u0002\u0002\u026d\u026e\u0007\u0015",
    "\u0002\u0002\u026eM\u0003\u0002\u0002\u0002\u026f\u0270\u0007!\u0002",
    "\u0002\u0270\u0271\u0007:\u0002\u0002\u0271\u0272\u0007\"\u0002\u0002",
    "\u0272\u0273\u0007:\u0002\u0002\u0273\u0275\u0007\u000f\u0002\u0002",
    "\u0274\u0276\u0007\u000b\u0002\u0002\u0275\u0274\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0003\u0002\u0002\u0002\u0276O\u0003\u0002\u0002\u0002",
    "\u0277\u0278\u0007.\u0002\u0002\u0278Q\u0003\u0002\u0002\u0002\u0279",
    "\u027a\t\u0005\u0002\u0002\u027aS\u0003\u0002\u0002\u0002\u027b\u027c",
    "\u0005f4\u0002\u027c\u027e\u0007?\u0002\u0002\u027d\u027f\u0007A\u0002",
    "\u0002\u027e\u027d\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002",
    "\u0002\u027f\u0282\u0003\u0002\u0002\u0002\u0280\u0283\u00056\u001c",
    "\u0002\u0281\u0283\u0005V,\u0002\u0282\u0280\u0003\u0002\u0002\u0002",
    "\u0282\u0281\u0003\u0002\u0002\u0002\u0283U\u0003\u0002\u0002\u0002",
    "\u0284\u0289\u0005b2\u0002\u0285\u0289\u00079\u0002\u0002\u0286\u0289",
    "\u0007>\u0002\u0002\u0287\u0289\u0007=\u0002\u0002\u0288\u0284\u0003",
    "\u0002\u0002\u0002\u0288\u0285\u0003\u0002\u0002\u0002\u0288\u0286\u0003",
    "\u0002\u0002\u0002\u0288\u0287\u0003\u0002\u0002\u0002\u0289\u0291\u0003",
    "\u0002\u0002\u0002\u028a\u028f\u0007\r\u0002\u0002\u028b\u0290\u0005",
    "b2\u0002\u028c\u0290\u00079\u0002\u0002\u028d\u0290\u0007>\u0002\u0002",
    "\u028e\u0290\u0007=\u0002\u0002\u028f\u028b\u0003\u0002\u0002\u0002",
    "\u028f\u028c\u0003\u0002\u0002\u0002\u028f\u028d\u0003\u0002\u0002\u0002",
    "\u028f\u028e\u0003\u0002\u0002\u0002\u0290\u0292\u0003\u0002\u0002\u0002",
    "\u0291\u028a\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002",
    "\u0293\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002",
    "\u0294W\u0003\u0002\u0002\u0002\u0295\u029d\u0005T+\u0002\u0296\u0298",
    "\u0007\u000b\u0002\u0002\u0297\u0299\u0007A\u0002\u0002\u0298\u0297",
    "\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u029a",
    "\u0003\u0002\u0002\u0002\u029a\u029c\u0005T+\u0002\u029b\u0296\u0003",
    "\u0002\u0002\u0002\u029c\u029f\u0003\u0002\u0002\u0002\u029d\u029b\u0003",
    "\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029eY\u0003",
    "\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u02a0\u02a1\u0005",
    "p9\u0002\u02a1[\u0003\u0002\u0002\u0002\u02a2\u02a7\u0005Z.\u0002\u02a3",
    "\u02a4\u0007\u000b\u0002\u0002\u02a4\u02a6\u0005Z.\u0002\u02a5\u02a3",
    "\u0003\u0002\u0002\u0002\u02a6\u02a9\u0003\u0002\u0002\u0002\u02a7\u02a5",
    "\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8]",
    "\u0003\u0002\u0002\u0002\u02a9\u02a7\u0003\u0002\u0002\u0002\u02aa\u02ac",
    "\u0007B\u0002\u0002\u02ab\u02aa\u0003\u0002\u0002\u0002\u02ab\u02ac",
    "\u0003\u0002\u0002\u0002\u02ac\u02ae\u0003\u0002\u0002\u0002\u02ad\u02af",
    "\u0005v<\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002\u02af\u02b0\u0003",
    "\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003",
    "\u0002\u0002\u0002\u02b1\u02b3\u0003\u0002\u0002\u0002\u02b2\u02b4\u0007",
    "B\u0002\u0002\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003",
    "\u0002\u0002\u0002\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5\u02b6\u0007",
    "6\u0002\u0002\u02b6\u02b8\u00052\u001a\u0002\u02b7\u02b5\u0003\u0002",
    "\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8_\u0003\u0002",
    "\u0002\u0002\u02b9\u02bb\u0007<\u0002\u0002\u02ba\u02b9\u0003\u0002",
    "\u0002\u0002\u02bb\u02be\u0003\u0002\u0002\u0002\u02bc\u02ba\u0003\u0002",
    "\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bda\u0003\u0002",
    "\u0002\u0002\u02be\u02bc\u0003\u0002\u0002\u0002\u02bf\u02c1\u0007<",
    "\u0002\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c4\u0003\u0002",
    "\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002",
    "\u0002\u0002\u02c3c\u0003\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002",
    "\u0002\u0002\u02c5\u02c7\u0007<\u0002\u0002\u02c6\u02c5\u0003\u0002",
    "\u0002\u0002\u02c7\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002",
    "\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9e\u0003\u0002",
    "\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cd\u0007<",
    "\u0002\u0002\u02cc\u02cb\u0003\u0002\u0002\u0002\u02cd\u02d0\u0003\u0002",
    "\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002",
    "\u0002\u0002\u02cf\u02d9\u0003\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002",
    "\u0002\u0002\u02d1\u02d3\u0007<\u0002\u0002\u02d2\u02d1\u0003\u0002",
    "\u0002\u0002\u02d3\u02d6\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002",
    "\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d7\u0003\u0002",
    "\u0002\u0002\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d7\u02d9\u0007\r",
    "\u0002\u0002\u02d8\u02ce\u0003\u0002\u0002\u0002\u02d8\u02d4\u0003\u0002",
    "\u0002\u0002\u02d9g\u0003\u0002\u0002\u0002\u02da\u02e4\u0007<\u0002",
    "\u0002\u02db\u02dc\u0007\u0017\u0002\u0002\u02dc\u02dd\u0007<\u0002",
    "\u0002\u02dd\u02df\u0007\u000b\u0002\u0002\u02de\u02e0\u0007A\u0002",
    "\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002",
    "\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1\u02e2\u0007<\u0002",
    "\u0002\u02e2\u02e4\u0007\u0018\u0002\u0002\u02e3\u02da\u0003\u0002\u0002",
    "\u0002\u02e3\u02db\u0003\u0002\u0002\u0002\u02e4i\u0003\u0002\u0002",
    "\u0002\u02e5\u02eb\u0007\'\u0002\u0002\u02e6\u02eb\u0007(\u0002\u0002",
    "\u02e7\u02eb\u0007)\u0002\u0002\u02e8\u02eb\u0007*\u0002\u0002\u02e9",
    "\u02eb\u0007+\u0002\u0002\u02ea\u02e5\u0003\u0002\u0002\u0002\u02ea",
    "\u02e6\u0003\u0002\u0002\u0002\u02ea\u02e7\u0003\u0002\u0002\u0002\u02ea",
    "\u02e8\u0003\u0002\u0002\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb",
    "k\u0003\u0002\u0002\u0002\u02ec\u02ee\u0007B\u0002\u0002\u02ed\u02ec",
    "\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02fc",
    "\u0003\u0002\u0002\u0002\u02ef\u02f5\u0005^0\u0002\u02f0\u02f2\u0007",
    "\u0017\u0002\u0002\u02f1\u02f3\u0005^0\u0002\u02f2\u02f1\u0003\u0002",
    "\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002",
    "\u0002\u0002\u02f4\u02f6\u0007\u0018\u0002\u0002\u02f5\u02f0\u0003\u0002",
    "\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f8\u0003\u0002",
    "\u0002\u0002\u02f7\u02f9\u0007,\u0002\u0002\u02f8\u02f7\u0003\u0002",
    "\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002",
    "\u0002\u0002\u02fa\u02ef\u0003\u0002\u0002\u0002\u02fb\u02fe\u0003\u0002",
    "\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002",
    "\u0002\u0002\u02fd\u0301\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002",
    "\u0002\u0002\u02ff\u0300\u0007?\u0002\u0002\u0300\u0302\u0005n8\u0002",
    "\u0301\u02ff\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002",
    "\u0302\u0304\u0003\u0002\u0002\u0002\u0303\u0305\u0007B\u0002\u0002",
    "\u0304\u0303\u0003\u0002\u0002\u0002\u0304\u0305\u0003\u0002\u0002\u0002",
    "\u0305m\u0003\u0002\u0002\u0002\u0306\u031a\u0007<\u0002\u0002\u0307",
    "\u0308\u0007<\u0002\u0002\u0308\u031a\u0007\r\u0002\u0002\u0309\u030c",
    "\u0007<\u0002\u0002\u030a\u030b\u0007\r\u0002\u0002\u030b\u030d\u0007",
    "<\u0002\u0002\u030c\u030a\u0003\u0002\u0002\u0002\u030d\u030e\u0003",
    "\u0002\u0002\u0002\u030e\u030c\u0003\u0002\u0002\u0002\u030e\u030f\u0003",
    "\u0002\u0002\u0002\u030f\u031a\u0003\u0002\u0002\u0002\u0310\u0313\u0007",
    "<\u0002\u0002\u0311\u0312\u0007,\u0002\u0002\u0312\u0314\u0007<\u0002",
    "\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002",
    "\u0002\u0315\u0313\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002",
    "\u0002\u0316\u031a\u0003\u0002\u0002\u0002\u0317\u0318\u0007<\u0002",
    "\u0002\u0318\u031a\u0007,\u0002\u0002\u0319\u0306\u0003\u0002\u0002",
    "\u0002\u0319\u0307\u0003\u0002\u0002\u0002\u0319\u0309\u0003\u0002\u0002",
    "\u0002\u0319\u0310\u0003\u0002\u0002\u0002\u0319\u0317\u0003\u0002\u0002",
    "\u0002\u031ao\u0003\u0002\u0002\u0002\u031b\u031c\u0005^0\u0002\u031c",
    "\u031e\u0007\u0007\u0002\u0002\u031d\u031f\u0005\\/\u0002\u031e\u031d",
    "\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0320",
    "\u0003\u0002\u0002\u0002\u0320\u0321\u0007\b\u0002\u0002\u0321\u0328",
    "\u0003\u0002\u0002\u0002\u0322\u0323\u0005^0\u0002\u0323\u0324\u0007",
    "\u0014\u0002\u0002\u0324\u0325\u0007\u0015\u0002\u0002\u0325\u0328\u0003",
    "\u0002\u0002\u0002\u0326\u0328\u0005^0\u0002\u0327\u031b\u0003\u0002",
    "\u0002\u0002\u0327\u0322\u0003\u0002\u0002\u0002\u0327\u0326\u0003\u0002",
    "\u0002\u0002\u0328q\u0003\u0002\u0002\u0002\u0329\u032a\u0005^0\u0002",
    "\u032a\u032b\u00078\u0002\u0002\u032b\u032d\u0003\u0002\u0002\u0002",
    "\u032c\u0329\u0003\u0002\u0002\u0002\u032d\u032e\u0003\u0002\u0002\u0002",
    "\u032e\u032c\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002",
    "\u032fs\u0003\u0002\u0002\u0002\u0330\u0331\u0007-\u0002\u0002\u0331",
    "\u0338\u0005^0\u0002\u0332\u0333\u0007\u000e\u0002\u0002\u0333\u0335",
    "\u00078\u0002\u0002\u0334\u0336\u0005r:\u0002\u0335\u0334\u0003\u0002",
    "\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336\u0337\u0003\u0002",
    "\u0002\u0002\u0337\u0339\u0007\u000f\u0002\u0002\u0338\u0332\u0003\u0002",
    "\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339u\u0003\u0002",
    "\u0002\u0002\u033a\u033b\t\u0006\u0002\u0002\u033bw\u0003\u0002\u0002",
    "\u0002\u008f{\u0084\u0086\u008b\u008f\u0093\u0097\u009b\u00a1\u00a5",
    "\u00ac\u00b1\u00b5\u00b9\u00bc\u00c3\u00c8\u00cb\u00d8\u00dd\u00e4\u00e9",
    "\u00f4\u00fa\u0103\u0105\u0109\u010e\u0111\u0115\u0119\u0121\u0123\u0127",
    "\u012b\u0130\u0133\u0137\u013b\u0140\u0144\u014f\u015e\u0160\u0166\u016c",
    "\u016f\u0172\u0177\u017a\u0181\u0184\u0189\u018d\u0192\u0197\u019b\u019f",
    "\u01a3\u01a7\u01ab\u01b0\u01b6\u01b9\u01bc\u01bf\u01c5\u01c9\u01cb\u01d1",
    "\u01d6\u01d9\u01dc\u01e1\u01e5\u01e7\u01ec\u01f0\u01f3\u01f7\u01fa\u01ff",
    "\u0204\u020a\u020f\u0213\u0217\u021b\u021f\u0223\u022b\u022e\u0231\u023c",
    "\u0240\u0243\u0246\u0249\u0250\u0256\u025a\u025d\u0260\u026a\u0275\u027e",
    "\u0282\u0288\u028f\u0293\u0298\u029d\u02a7\u02ab\u02b0\u02b3\u02b7\u02bc",
    "\u02c2\u02c8\u02ce\u02d4\u02d8\u02df\u02e3\u02ea\u02ed\u02f2\u02f5\u02f8",
    "\u02fc\u0301\u0304\u030e\u0315\u0319\u031e\u0327\u032e\u0335\u0338"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'@startuml'", "'@enduml'", "'of'", "'end note'", 
                     "'<'", "'>'", "'</'", "'?'", "','", "'!'", "'.'", "'{'", 
                     "'}'", "'hide'", "'''", "';'", "'='", "'['", "']'", 
                     "'[]'", "'('", "')'", "'\"*\"'", "'\"0..1\"'", "'\"0..*\"'", 
                     "'\"1..*\"'", "'\"0..n\"'", "'\"1..n\"'", "''{\"points\": '", 
                     "'}''", "'{\"x\": '", "', \"y\": '", "'+'", "'-'", 
                     "'#'", "'~'", "'{static}'", "'{abstract}'", "'{field}'", 
                     "'{classifier}'", "'{method}'", "'/'", "'enum'", null, 
                     null, "'note'", "'class'", "'interface'", "'abstract'", 
                     "'object'", "'package'", "'as'", "'newpage'", null, 
                     null, null, null, null, "'*[]'", "'*'", "':'", null, 
                     null, "'\"'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, "CONNECTOR", 
                      "DIRECTION", "NOTE", "CLASS", "INTERFACE", "ABSTRACT", 
                      "OBJECT", "PACKAGE", "AS", "NEWPAGE", "NEWLINE", "ARRAY", 
                      "INTEGER", "FLOAT", "WORD", "ANYARRAY", "ANY", "DOTDOT", 
                      "SPEZIALS", "WHITESPACE", "QUOTATION", "COMMENT", 
                      "ANYCHAR" ];

var ruleNames =  [ "diagram", "class_diagram", "comment_section", "comment_content", 
                   "comment_element", "comment_newLine", "multiLine_content", 
                   "comment_direction", "comment_relatedTo", "comment_name", 
                   "package_section", "package_name", "class_declaration", 
                   "class_type", "class_description", "class_name", "class_dataType", 
                   "hide_declaration", "styling", "styling_expression", 
                   "styling_params", "styling_value", "attribute", "attribute_name", 
                   "attribute_type", "attribute_default", "function_argument_attribute_type", 
                   "method", "mathode_name", "declaration", "declaration_name", 
                   "declaration_argument", "multiplicity", "connection_left", 
                   "connection_right", "connection", "connection_points", 
                   "point_array", "points", "connection_symbol", "visibility", 
                   "function_argument", "nested_argument_type", "function_argument_list", 
                   "template_argument", "template_argument_list", "ident", 
                   "methode_data_type", "attribute_data_type", "data_type", 
                   "variable_name", "connection_name", "modifiers", "stereotype", 
                   "stereotype_value", "type_declaration", "item_list", 
                   "enum_declaration", "any_except_newline" ];

function PlantUMLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PlantUMLParser.prototype = Object.create(antlr4.Parser.prototype);
PlantUMLParser.prototype.constructor = PlantUMLParser;

Object.defineProperty(PlantUMLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PlantUMLParser.EOF = antlr4.Token.EOF;
PlantUMLParser.T__0 = 1;
PlantUMLParser.T__1 = 2;
PlantUMLParser.T__2 = 3;
PlantUMLParser.T__3 = 4;
PlantUMLParser.T__4 = 5;
PlantUMLParser.T__5 = 6;
PlantUMLParser.T__6 = 7;
PlantUMLParser.T__7 = 8;
PlantUMLParser.T__8 = 9;
PlantUMLParser.T__9 = 10;
PlantUMLParser.T__10 = 11;
PlantUMLParser.T__11 = 12;
PlantUMLParser.T__12 = 13;
PlantUMLParser.T__13 = 14;
PlantUMLParser.T__14 = 15;
PlantUMLParser.T__15 = 16;
PlantUMLParser.T__16 = 17;
PlantUMLParser.T__17 = 18;
PlantUMLParser.T__18 = 19;
PlantUMLParser.T__19 = 20;
PlantUMLParser.T__20 = 21;
PlantUMLParser.T__21 = 22;
PlantUMLParser.T__22 = 23;
PlantUMLParser.T__23 = 24;
PlantUMLParser.T__24 = 25;
PlantUMLParser.T__25 = 26;
PlantUMLParser.T__26 = 27;
PlantUMLParser.T__27 = 28;
PlantUMLParser.T__28 = 29;
PlantUMLParser.T__29 = 30;
PlantUMLParser.T__30 = 31;
PlantUMLParser.T__31 = 32;
PlantUMLParser.T__32 = 33;
PlantUMLParser.T__33 = 34;
PlantUMLParser.T__34 = 35;
PlantUMLParser.T__35 = 36;
PlantUMLParser.T__36 = 37;
PlantUMLParser.T__37 = 38;
PlantUMLParser.T__38 = 39;
PlantUMLParser.T__39 = 40;
PlantUMLParser.T__40 = 41;
PlantUMLParser.T__41 = 42;
PlantUMLParser.T__42 = 43;
PlantUMLParser.CONNECTOR = 44;
PlantUMLParser.DIRECTION = 45;
PlantUMLParser.NOTE = 46;
PlantUMLParser.CLASS = 47;
PlantUMLParser.INTERFACE = 48;
PlantUMLParser.ABSTRACT = 49;
PlantUMLParser.OBJECT = 50;
PlantUMLParser.PACKAGE = 51;
PlantUMLParser.AS = 52;
PlantUMLParser.NEWPAGE = 53;
PlantUMLParser.NEWLINE = 54;
PlantUMLParser.ARRAY = 55;
PlantUMLParser.INTEGER = 56;
PlantUMLParser.FLOAT = 57;
PlantUMLParser.WORD = 58;
PlantUMLParser.ANYARRAY = 59;
PlantUMLParser.ANY = 60;
PlantUMLParser.DOTDOT = 61;
PlantUMLParser.SPEZIALS = 62;
PlantUMLParser.WHITESPACE = 63;
PlantUMLParser.QUOTATION = 64;
PlantUMLParser.COMMENT = 65;
PlantUMLParser.ANYCHAR = 66;

PlantUMLParser.RULE_diagram = 0;
PlantUMLParser.RULE_class_diagram = 1;
PlantUMLParser.RULE_comment_section = 2;
PlantUMLParser.RULE_comment_content = 3;
PlantUMLParser.RULE_comment_element = 4;
PlantUMLParser.RULE_comment_newLine = 5;
PlantUMLParser.RULE_multiLine_content = 6;
PlantUMLParser.RULE_comment_direction = 7;
PlantUMLParser.RULE_comment_relatedTo = 8;
PlantUMLParser.RULE_comment_name = 9;
PlantUMLParser.RULE_package_section = 10;
PlantUMLParser.RULE_package_name = 11;
PlantUMLParser.RULE_class_declaration = 12;
PlantUMLParser.RULE_class_type = 13;
PlantUMLParser.RULE_class_description = 14;
PlantUMLParser.RULE_class_name = 15;
PlantUMLParser.RULE_class_dataType = 16;
PlantUMLParser.RULE_hide_declaration = 17;
PlantUMLParser.RULE_styling = 18;
PlantUMLParser.RULE_styling_expression = 19;
PlantUMLParser.RULE_styling_params = 20;
PlantUMLParser.RULE_styling_value = 21;
PlantUMLParser.RULE_attribute = 22;
PlantUMLParser.RULE_attribute_name = 23;
PlantUMLParser.RULE_attribute_type = 24;
PlantUMLParser.RULE_attribute_default = 25;
PlantUMLParser.RULE_function_argument_attribute_type = 26;
PlantUMLParser.RULE_method = 27;
PlantUMLParser.RULE_mathode_name = 28;
PlantUMLParser.RULE_declaration = 29;
PlantUMLParser.RULE_declaration_name = 30;
PlantUMLParser.RULE_declaration_argument = 31;
PlantUMLParser.RULE_multiplicity = 32;
PlantUMLParser.RULE_connection_left = 33;
PlantUMLParser.RULE_connection_right = 34;
PlantUMLParser.RULE_connection = 35;
PlantUMLParser.RULE_connection_points = 36;
PlantUMLParser.RULE_point_array = 37;
PlantUMLParser.RULE_points = 38;
PlantUMLParser.RULE_connection_symbol = 39;
PlantUMLParser.RULE_visibility = 40;
PlantUMLParser.RULE_function_argument = 41;
PlantUMLParser.RULE_nested_argument_type = 42;
PlantUMLParser.RULE_function_argument_list = 43;
PlantUMLParser.RULE_template_argument = 44;
PlantUMLParser.RULE_template_argument_list = 45;
PlantUMLParser.RULE_ident = 46;
PlantUMLParser.RULE_methode_data_type = 47;
PlantUMLParser.RULE_attribute_data_type = 48;
PlantUMLParser.RULE_data_type = 49;
PlantUMLParser.RULE_variable_name = 50;
PlantUMLParser.RULE_connection_name = 51;
PlantUMLParser.RULE_modifiers = 52;
PlantUMLParser.RULE_stereotype = 53;
PlantUMLParser.RULE_stereotype_value = 54;
PlantUMLParser.RULE_type_declaration = 55;
PlantUMLParser.RULE_item_list = 56;
PlantUMLParser.RULE_enum_declaration = 57;
PlantUMLParser.RULE_any_except_newline = 58;


function DiagramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_diagram;
    return this;
}

DiagramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiagramContext.prototype.constructor = DiagramContext;

DiagramContext.prototype.NEWLINE = function() {
    return this.getToken(PlantUMLParser.NEWLINE, 0);
};

DiagramContext.prototype.class_diagram = function() {
    return this.getTypedRuleContext(Class_diagramContext,0);
};

DiagramContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterDiagram(this);
	}
};

DiagramContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitDiagram(this);
	}
};

DiagramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitDiagram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.DiagramContext = DiagramContext;

PlantUMLParser.prototype.diagram = function() {

    var localctx = new DiagramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PlantUMLParser.RULE_diagram);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 118;
        this.match(PlantUMLParser.T__0);
        this.state = 121;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        switch(la_) {
        case 1:
            this.state = 119;
            this.match(PlantUMLParser.NEWLINE);
            break;

        case 2:
            this.state = 120;
            this.class_diagram();
            break;

        }
        this.state = 123;
        this.match(PlantUMLParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_diagramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_class_diagram;
    return this;
}

Class_diagramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_diagramContext.prototype.constructor = Class_diagramContext;

Class_diagramContext.prototype.class_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Class_declarationContext);
    } else {
        return this.getTypedRuleContext(Class_declarationContext,i);
    }
};

Class_diagramContext.prototype.connection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConnectionContext);
    } else {
        return this.getTypedRuleContext(ConnectionContext,i);
    }
};

Class_diagramContext.prototype.package_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_sectionContext);
    } else {
        return this.getTypedRuleContext(Package_sectionContext,i);
    }
};

Class_diagramContext.prototype.comment_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_sectionContext);
    } else {
        return this.getTypedRuleContext(Comment_sectionContext,i);
    }
};

Class_diagramContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.NEWLINE);
    } else {
        return this.getToken(PlantUMLParser.NEWLINE, i);
    }
};


Class_diagramContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterClass_diagram(this);
	}
};

Class_diagramContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitClass_diagram(this);
	}
};

Class_diagramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitClass_diagram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Class_diagramContext = Class_diagramContext;

PlantUMLParser.prototype.class_diagram = function() {

    var localctx = new Class_diagramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PlantUMLParser.RULE_class_diagram);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 132;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlantUMLParser.T__20 || _la===PlantUMLParser.T__28 || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (PlantUMLParser.NOTE - 46)) | (1 << (PlantUMLParser.CLASS - 46)) | (1 << (PlantUMLParser.INTERFACE - 46)) | (1 << (PlantUMLParser.ABSTRACT - 46)) | (1 << (PlantUMLParser.OBJECT - 46)) | (1 << (PlantUMLParser.PACKAGE - 46)) | (1 << (PlantUMLParser.NEWLINE - 46)) | (1 << (PlantUMLParser.WORD - 46)))) !== 0)) {
            this.state = 130;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlantUMLParser.CLASS:
            case PlantUMLParser.INTERFACE:
            case PlantUMLParser.ABSTRACT:
            case PlantUMLParser.OBJECT:
                this.state = 125;
                this.class_declaration();
                break;
            case PlantUMLParser.T__20:
            case PlantUMLParser.T__28:
            case PlantUMLParser.WORD:
                this.state = 126;
                this.connection();
                break;
            case PlantUMLParser.PACKAGE:
                this.state = 127;
                this.package_section();
                break;
            case PlantUMLParser.NOTE:
                this.state = 128;
                this.comment_section();
                break;
            case PlantUMLParser.NEWLINE:
                this.state = 129;
                this.match(PlantUMLParser.NEWLINE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_section;
    this.direction = null; // Comment_directionContext
    this.relatedTo = null; // Comment_relatedToContext
    this.name = null; // Comment_nameContext
    return this;
}

Comment_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_sectionContext.prototype.constructor = Comment_sectionContext;

Comment_sectionContext.prototype.NOTE = function() {
    return this.getToken(PlantUMLParser.NOTE, 0);
};

Comment_sectionContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

Comment_sectionContext.prototype.comment_content = function() {
    return this.getTypedRuleContext(Comment_contentContext,0);
};

Comment_sectionContext.prototype.comment_direction = function() {
    return this.getTypedRuleContext(Comment_directionContext,0);
};

Comment_sectionContext.prototype.comment_relatedTo = function() {
    return this.getTypedRuleContext(Comment_relatedToContext,0);
};

Comment_sectionContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


Comment_sectionContext.prototype.AS = function() {
    return this.getToken(PlantUMLParser.AS, 0);
};

Comment_sectionContext.prototype.comment_name = function() {
    return this.getTypedRuleContext(Comment_nameContext,0);
};

Comment_sectionContext.prototype.multiLine_content = function() {
    return this.getTypedRuleContext(MultiLine_contentContext,0);
};

Comment_sectionContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.NEWLINE);
    } else {
        return this.getToken(PlantUMLParser.NEWLINE, i);
    }
};


Comment_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_section(this);
	}
};

Comment_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_section(this);
	}
};

Comment_sectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_section(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_sectionContext = Comment_sectionContext;

PlantUMLParser.prototype.comment_section = function() {

    var localctx = new Comment_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PlantUMLParser.RULE_comment_section);
    var _la = 0; // Token type
    try {
        this.state = 183;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 135;
            this.match(PlantUMLParser.NOTE);
            this.state = 137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 136;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 139;
            localctx.direction = this.comment_direction();
            this.state = 141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 140;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 143;
            this.match(PlantUMLParser.T__2);
            this.state = 145;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 144;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 147;
            localctx.relatedTo = this.comment_relatedTo();
            this.state = 149;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 148;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 151;
            this.match(PlantUMLParser.DOTDOT);
            this.state = 153;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 152;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 155;
            this.comment_content();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 157;
            this.match(PlantUMLParser.NOTE);
            this.state = 159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 158;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 161;
            this.comment_content();
            this.state = 163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 162;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 165;
            this.match(PlantUMLParser.AS);
            this.state = 166;
            localctx.name = this.comment_name();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 168;
            this.match(PlantUMLParser.NOTE);
            this.state = 170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 169;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 172;
            this.match(PlantUMLParser.AS);
            this.state = 173;
            localctx.name = this.comment_name();
            this.state = 175;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            if(la_===1) {
                this.state = 174;
                this.match(PlantUMLParser.NEWLINE);

            }
            this.state = 177;
            this.multiLine_content();
            this.state = 179;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.NEWLINE) {
                this.state = 178;
                this.match(PlantUMLParser.NEWLINE);
            }

            this.state = 181;
            this.match(PlantUMLParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_contentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_content;
    return this;
}

Comment_contentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_contentContext.prototype.constructor = Comment_contentContext;

Comment_contentContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


Comment_contentContext.prototype.comment_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_elementContext);
    } else {
        return this.getTypedRuleContext(Comment_elementContext,i);
    }
};

Comment_contentContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


Comment_contentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_content(this);
	}
};

Comment_contentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_content(this);
	}
};

Comment_contentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_content(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_contentContext = Comment_contentContext;

PlantUMLParser.prototype.comment_content = function() {

    var localctx = new Comment_contentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PlantUMLParser.RULE_comment_content);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 185;
            this.match(PlantUMLParser.QUOTATION);
        }

        this.state = 196; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 188;
        		this.comment_element();
        		this.state = 193;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 189;
        		        this.match(PlantUMLParser.WHITESPACE);
        		        this.state = 190;
        		        this.comment_element(); 
        		    }
        		    this.state = 195;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 198; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,16, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 200;
            this.match(PlantUMLParser.QUOTATION);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_element;
    return this;
}

Comment_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_elementContext.prototype.constructor = Comment_elementContext;

Comment_elementContext.prototype.WORD = function() {
    return this.getToken(PlantUMLParser.WORD, 0);
};

Comment_elementContext.prototype.NOTE = function() {
    return this.getToken(PlantUMLParser.NOTE, 0);
};

Comment_elementContext.prototype.any_except_newline = function() {
    return this.getTypedRuleContext(Any_except_newlineContext,0);
};

Comment_elementContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

Comment_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_element(this);
	}
};

Comment_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_element(this);
	}
};

Comment_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_elementContext = Comment_elementContext;

PlantUMLParser.prototype.comment_element = function() {

    var localctx = new Comment_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PlantUMLParser.RULE_comment_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 214;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.state = 203;
            this.match(PlantUMLParser.WORD);
            break;

        case 2:
            this.state = 204;
            this.match(PlantUMLParser.T__4);
            this.state = 205;
            this.match(PlantUMLParser.WORD);
            this.state = 206;
            this.match(PlantUMLParser.T__5);
            break;

        case 3:
            this.state = 207;
            this.match(PlantUMLParser.T__6);
            this.state = 208;
            this.match(PlantUMLParser.WORD);
            this.state = 209;
            this.match(PlantUMLParser.T__5);
            break;

        case 4:
            this.state = 210;
            this.match(PlantUMLParser.WORD);
            this.state = 211;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlantUMLParser.T__7) | (1 << PlantUMLParser.T__8) | (1 << PlantUMLParser.T__9) | (1 << PlantUMLParser.T__10))) !== 0) || _la===PlantUMLParser.DOTDOT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 5:
            this.state = 212;
            this.match(PlantUMLParser.NOTE);
            break;

        case 6:
            this.state = 213;
            this.any_except_newline();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_newLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_newLine;
    return this;
}

Comment_newLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_newLineContext.prototype.constructor = Comment_newLineContext;

Comment_newLineContext.prototype.NEWLINE = function() {
    return this.getToken(PlantUMLParser.NEWLINE, 0);
};

Comment_newLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_newLine(this);
	}
};

Comment_newLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_newLine(this);
	}
};

Comment_newLineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_newLine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_newLineContext = Comment_newLineContext;

PlantUMLParser.prototype.comment_newLine = function() {

    var localctx = new Comment_newLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PlantUMLParser.RULE_comment_newLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 216;
        this.match(PlantUMLParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiLine_contentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_multiLine_content;
    return this;
}

MultiLine_contentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiLine_contentContext.prototype.constructor = MultiLine_contentContext;

MultiLine_contentContext.prototype.comment_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_elementContext);
    } else {
        return this.getTypedRuleContext(Comment_elementContext,i);
    }
};

MultiLine_contentContext.prototype.comment_newLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_newLineContext);
    } else {
        return this.getTypedRuleContext(Comment_newLineContext,i);
    }
};

MultiLine_contentContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


MultiLine_contentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterMultiLine_content(this);
	}
};

MultiLine_contentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitMultiLine_content(this);
	}
};

MultiLine_contentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitMultiLine_content(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.MultiLine_contentContext = MultiLine_contentContext;

PlantUMLParser.prototype.multiLine_content = function() {

    var localctx = new MultiLine_contentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PlantUMLParser.RULE_multiLine_content);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 219;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlantUMLParser.NEWLINE) {
                    this.state = 218;
                    this.comment_newLine();
                }

                this.state = 221;
                this.comment_element();
                this.state = 226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PlantUMLParser.WHITESPACE) {
                    this.state = 222;
                    this.match(PlantUMLParser.WHITESPACE);
                    this.state = 223;
                    this.comment_element();
                    this.state = 228;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } 
            }
            this.state = 233;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_directionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_direction;
    return this;
}

Comment_directionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_directionContext.prototype.constructor = Comment_directionContext;

Comment_directionContext.prototype.DIRECTION = function() {
    return this.getToken(PlantUMLParser.DIRECTION, 0);
};

Comment_directionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_direction(this);
	}
};

Comment_directionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_direction(this);
	}
};

Comment_directionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_direction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_directionContext = Comment_directionContext;

PlantUMLParser.prototype.comment_direction = function() {

    var localctx = new Comment_directionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PlantUMLParser.RULE_comment_direction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this.match(PlantUMLParser.DIRECTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_relatedToContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_relatedTo;
    return this;
}

Comment_relatedToContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_relatedToContext.prototype.constructor = Comment_relatedToContext;

Comment_relatedToContext.prototype.WORD = function() {
    return this.getToken(PlantUMLParser.WORD, 0);
};

Comment_relatedToContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_relatedTo(this);
	}
};

Comment_relatedToContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_relatedTo(this);
	}
};

Comment_relatedToContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_relatedTo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_relatedToContext = Comment_relatedToContext;

PlantUMLParser.prototype.comment_relatedTo = function() {

    var localctx = new Comment_relatedToContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PlantUMLParser.RULE_comment_relatedTo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 236;
        this.match(PlantUMLParser.WORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comment_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_comment_name;
    return this;
}

Comment_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_nameContext.prototype.constructor = Comment_nameContext;

Comment_nameContext.prototype.WORD = function() {
    return this.getToken(PlantUMLParser.WORD, 0);
};

Comment_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterComment_name(this);
	}
};

Comment_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitComment_name(this);
	}
};

Comment_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitComment_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Comment_nameContext = Comment_nameContext;

PlantUMLParser.prototype.comment_name = function() {

    var localctx = new Comment_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PlantUMLParser.RULE_comment_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.match(PlantUMLParser.WORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_package_section;
    return this;
}

Package_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_sectionContext.prototype.constructor = Package_sectionContext;

Package_sectionContext.prototype.PACKAGE = function() {
    return this.getToken(PlantUMLParser.PACKAGE, 0);
};

Package_sectionContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


Package_sectionContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Package_sectionContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


Package_sectionContext.prototype.class_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Class_declarationContext);
    } else {
        return this.getTypedRuleContext(Class_declarationContext,i);
    }
};

Package_sectionContext.prototype.connection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConnectionContext);
    } else {
        return this.getTypedRuleContext(ConnectionContext,i);
    }
};

Package_sectionContext.prototype.styling = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StylingContext);
    } else {
        return this.getTypedRuleContext(StylingContext,i);
    }
};

Package_sectionContext.prototype.package_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_sectionContext);
    } else {
        return this.getTypedRuleContext(Package_sectionContext,i);
    }
};

Package_sectionContext.prototype.comment_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comment_sectionContext);
    } else {
        return this.getTypedRuleContext(Comment_sectionContext,i);
    }
};

Package_sectionContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.NEWLINE);
    } else {
        return this.getToken(PlantUMLParser.NEWLINE, i);
    }
};


Package_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterPackage_section(this);
	}
};

Package_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitPackage_section(this);
	}
};

Package_sectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitPackage_section(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Package_sectionContext = Package_sectionContext;

PlantUMLParser.prototype.package_section = function() {

    var localctx = new Package_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PlantUMLParser.RULE_package_section);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.match(PlantUMLParser.PACKAGE);
        this.state = 242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 241;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 244;
        this.match(PlantUMLParser.QUOTATION);
        this.state = 245;
        this.package_name();
        this.state = 246;
        this.match(PlantUMLParser.QUOTATION);
        this.state = 248;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 247;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 263;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__11) {
            this.state = 250;
            this.match(PlantUMLParser.T__11);
            this.state = 259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlantUMLParser.T__14) | (1 << PlantUMLParser.T__20) | (1 << PlantUMLParser.T__28))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (PlantUMLParser.NOTE - 46)) | (1 << (PlantUMLParser.CLASS - 46)) | (1 << (PlantUMLParser.INTERFACE - 46)) | (1 << (PlantUMLParser.ABSTRACT - 46)) | (1 << (PlantUMLParser.OBJECT - 46)) | (1 << (PlantUMLParser.PACKAGE - 46)) | (1 << (PlantUMLParser.NEWLINE - 46)) | (1 << (PlantUMLParser.WORD - 46)))) !== 0)) {
                this.state = 257;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlantUMLParser.CLASS:
                case PlantUMLParser.INTERFACE:
                case PlantUMLParser.ABSTRACT:
                case PlantUMLParser.OBJECT:
                    this.state = 251;
                    this.class_declaration();
                    break;
                case PlantUMLParser.T__20:
                case PlantUMLParser.T__28:
                case PlantUMLParser.WORD:
                    this.state = 252;
                    this.connection();
                    break;
                case PlantUMLParser.T__14:
                    this.state = 253;
                    this.styling();
                    break;
                case PlantUMLParser.PACKAGE:
                    this.state = 254;
                    this.package_section();
                    break;
                case PlantUMLParser.NOTE:
                    this.state = 255;
                    this.comment_section();
                    break;
                case PlantUMLParser.NEWLINE:
                    this.state = 256;
                    this.match(PlantUMLParser.NEWLINE);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 261;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 262;
            this.match(PlantUMLParser.T__12);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_package_name;
    return this;
}

Package_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_nameContext.prototype.constructor = Package_nameContext;

Package_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Package_nameContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

Package_nameContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

Package_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterPackage_name(this);
	}
};

Package_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitPackage_name(this);
	}
};

Package_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitPackage_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Package_nameContext = Package_nameContext;

PlantUMLParser.prototype.package_name = function() {

    var localctx = new Package_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PlantUMLParser.RULE_package_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 265;
        this.match(PlantUMLParser.WORD);
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.DOTDOT) {
            this.state = 266;
            this.match(PlantUMLParser.DOTDOT);
            this.state = 268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 267;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 270;
            this.match(PlantUMLParser.WORD);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_class_declaration;
    return this;
}

Class_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_declarationContext.prototype.constructor = Class_declarationContext;

Class_declarationContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Class_declarationContext.prototype.class_description = function() {
    return this.getTypedRuleContext(Class_descriptionContext,0);
};

Class_declarationContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


Class_declarationContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

Class_declarationContext.prototype.method = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodContext);
    } else {
        return this.getTypedRuleContext(MethodContext,i);
    }
};

Class_declarationContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

Class_declarationContext.prototype.styling = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StylingContext);
    } else {
        return this.getTypedRuleContext(StylingContext,i);
    }
};

Class_declarationContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.NEWLINE);
    } else {
        return this.getToken(PlantUMLParser.NEWLINE, i);
    }
};


Class_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterClass_declaration(this);
	}
};

Class_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitClass_declaration(this);
	}
};

Class_declarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitClass_declaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Class_declarationContext = Class_declarationContext;

PlantUMLParser.prototype.class_declaration = function() {

    var localctx = new Class_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PlantUMLParser.RULE_class_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 273;
        this.class_type();
        this.state = 275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 274;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 277;
        this.class_description();
        this.state = 279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 278;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__11) {
            this.state = 281;
            this.match(PlantUMLParser.T__11);
            this.state = 289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlantUMLParser.T__14 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (PlantUMLParser.T__32 - 33)) | (1 << (PlantUMLParser.T__33 - 33)) | (1 << (PlantUMLParser.T__34 - 33)) | (1 << (PlantUMLParser.T__35 - 33)) | (1 << (PlantUMLParser.T__36 - 33)) | (1 << (PlantUMLParser.T__37 - 33)) | (1 << (PlantUMLParser.T__38 - 33)) | (1 << (PlantUMLParser.T__39 - 33)) | (1 << (PlantUMLParser.T__40 - 33)) | (1 << (PlantUMLParser.NEWLINE - 33)) | (1 << (PlantUMLParser.ARRAY - 33)) | (1 << (PlantUMLParser.WORD - 33)))) !== 0)) {
                this.state = 287;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 282;
                    this.attribute();
                    break;

                case 2:
                    this.state = 283;
                    this.method();
                    break;

                case 3:
                    this.state = 284;
                    this.declaration();
                    break;

                case 4:
                    this.state = 285;
                    this.styling();
                    break;

                case 5:
                    this.state = 286;
                    this.match(PlantUMLParser.NEWLINE);
                    break;

                }
                this.state = 291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 292;
            this.match(PlantUMLParser.T__12);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_class_type;
    return this;
}

Class_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_typeContext.prototype.constructor = Class_typeContext;

Class_typeContext.prototype.ABSTRACT = function() {
    return this.getToken(PlantUMLParser.ABSTRACT, 0);
};

Class_typeContext.prototype.CLASS = function() {
    return this.getToken(PlantUMLParser.CLASS, 0);
};

Class_typeContext.prototype.INTERFACE = function() {
    return this.getToken(PlantUMLParser.INTERFACE, 0);
};

Class_typeContext.prototype.OBJECT = function() {
    return this.getToken(PlantUMLParser.OBJECT, 0);
};

Class_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterClass_type(this);
	}
};

Class_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitClass_type(this);
	}
};

Class_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitClass_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Class_typeContext = Class_typeContext;

PlantUMLParser.prototype.class_type = function() {

    var localctx = new Class_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PlantUMLParser.RULE_class_type);
    var _la = 0; // Token type
    try {
        this.state = 302;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.ABSTRACT:
            this.enterOuterAlt(localctx, 1);
            this.state = 295;
            this.match(PlantUMLParser.ABSTRACT);
            this.state = 297;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.CLASS) {
                this.state = 296;
                this.match(PlantUMLParser.CLASS);
            }

            break;
        case PlantUMLParser.CLASS:
            this.enterOuterAlt(localctx, 2);
            this.state = 299;
            this.match(PlantUMLParser.CLASS);
            break;
        case PlantUMLParser.INTERFACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 300;
            this.match(PlantUMLParser.INTERFACE);
            break;
        case PlantUMLParser.OBJECT:
            this.enterOuterAlt(localctx, 4);
            this.state = 301;
            this.match(PlantUMLParser.OBJECT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_descriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_class_description;
    return this;
}

Class_descriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_descriptionContext.prototype.constructor = Class_descriptionContext;

Class_descriptionContext.prototype.class_name = function() {
    return this.getTypedRuleContext(Class_nameContext,0);
};

Class_descriptionContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


Class_descriptionContext.prototype.AS = function() {
    return this.getToken(PlantUMLParser.AS, 0);
};

Class_descriptionContext.prototype.class_dataType = function() {
    return this.getTypedRuleContext(Class_dataTypeContext,0);
};

Class_descriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterClass_description(this);
	}
};

Class_descriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitClass_description(this);
	}
};

Class_descriptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitClass_description(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Class_descriptionContext = Class_descriptionContext;

PlantUMLParser.prototype.class_description = function() {

    var localctx = new Class_descriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PlantUMLParser.RULE_class_description);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 304;
            this.match(PlantUMLParser.QUOTATION);
        }

        this.state = 307;
        this.class_name();
        this.state = 309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 308;
            this.match(PlantUMLParser.QUOTATION);
        }

        this.state = 313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.AS) {
            this.state = 311;
            this.match(PlantUMLParser.AS);
            this.state = 312;
            this.class_dataType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_class_name;
    return this;
}

Class_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_nameContext.prototype.constructor = Class_nameContext;

Class_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Class_nameContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

Class_nameContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

Class_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterClass_name(this);
	}
};

Class_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitClass_name(this);
	}
};

Class_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitClass_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Class_nameContext = Class_nameContext;

PlantUMLParser.prototype.class_name = function() {

    var localctx = new Class_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PlantUMLParser.RULE_class_name);
    var _la = 0; // Token type
    try {
        this.state = 322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 315;
            this.match(PlantUMLParser.WORD);
            this.state = 316;
            this.match(PlantUMLParser.DOTDOT);
            this.state = 318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 317;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 320;
            this.match(PlantUMLParser.WORD);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 321;
            this.match(PlantUMLParser.WORD);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_dataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_class_dataType;
    return this;
}

Class_dataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_dataTypeContext.prototype.constructor = Class_dataTypeContext;

Class_dataTypeContext.prototype.WORD = function() {
    return this.getToken(PlantUMLParser.WORD, 0);
};

Class_dataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterClass_dataType(this);
	}
};

Class_dataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitClass_dataType(this);
	}
};

Class_dataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitClass_dataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Class_dataTypeContext = Class_dataTypeContext;

PlantUMLParser.prototype.class_dataType = function() {

    var localctx = new Class_dataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PlantUMLParser.RULE_class_dataType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.match(PlantUMLParser.WORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hide_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_hide_declaration;
    return this;
}

Hide_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hide_declarationContext.prototype.constructor = Hide_declarationContext;

Hide_declarationContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

Hide_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterHide_declaration(this);
	}
};

Hide_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitHide_declaration(this);
	}
};

Hide_declarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitHide_declaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Hide_declarationContext = Hide_declarationContext;

PlantUMLParser.prototype.hide_declaration = function() {

    var localctx = new Hide_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PlantUMLParser.RULE_hide_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(PlantUMLParser.T__13);
        this.state = 327;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StylingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_styling;
    return this;
}

StylingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StylingContext.prototype.constructor = StylingContext;

StylingContext.prototype.styling_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Styling_expressionContext);
    } else {
        return this.getTypedRuleContext(Styling_expressionContext,i);
    }
};

StylingContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterStyling(this);
	}
};

StylingContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitStyling(this);
	}
};

StylingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitStyling(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.StylingContext = StylingContext;

PlantUMLParser.prototype.styling = function() {

    var localctx = new StylingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PlantUMLParser.RULE_styling);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(PlantUMLParser.T__14);
        this.state = 331; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 330;
            this.styling_expression();
            this.state = 333; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlantUMLParser.WORD);
        this.state = 335;
        this.match(PlantUMLParser.T__14);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Styling_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_styling_expression;
    this.styling_name = null; // Styling_paramsContext
    this.styling_val = null; // Styling_valueContext
    return this;
}

Styling_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Styling_expressionContext.prototype.constructor = Styling_expressionContext;

Styling_expressionContext.prototype.styling_params = function() {
    return this.getTypedRuleContext(Styling_paramsContext,0);
};

Styling_expressionContext.prototype.styling_value = function() {
    return this.getTypedRuleContext(Styling_valueContext,0);
};

Styling_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterStyling_expression(this);
	}
};

Styling_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitStyling_expression(this);
	}
};

Styling_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitStyling_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Styling_expressionContext = Styling_expressionContext;

PlantUMLParser.prototype.styling_expression = function() {

    var localctx = new Styling_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PlantUMLParser.RULE_styling_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        localctx.styling_name = this.styling_params();
        this.state = 338;
        localctx.styling_val = this.styling_value();
        this.state = 339;
        this.match(PlantUMLParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Styling_paramsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_styling_params;
    return this;
}

Styling_paramsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Styling_paramsContext.prototype.constructor = Styling_paramsContext;

Styling_paramsContext.prototype.WORD = function() {
    return this.getToken(PlantUMLParser.WORD, 0);
};

Styling_paramsContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

Styling_paramsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterStyling_params(this);
	}
};

Styling_paramsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitStyling_params(this);
	}
};

Styling_paramsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitStyling_params(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Styling_paramsContext = Styling_paramsContext;

PlantUMLParser.prototype.styling_params = function() {

    var localctx = new Styling_paramsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PlantUMLParser.RULE_styling_params);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        this.match(PlantUMLParser.WORD);
        this.state = 342;
        this.match(PlantUMLParser.DOTDOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Styling_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_styling_value;
    return this;
}

Styling_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Styling_valueContext.prototype.constructor = Styling_valueContext;

Styling_valueContext.prototype.FLOAT = function() {
    return this.getToken(PlantUMLParser.FLOAT, 0);
};

Styling_valueContext.prototype.INTEGER = function() {
    return this.getToken(PlantUMLParser.INTEGER, 0);
};

Styling_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterStyling_value(this);
	}
};

Styling_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitStyling_value(this);
	}
};

Styling_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitStyling_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Styling_valueContext = Styling_valueContext;

PlantUMLParser.prototype.styling_value = function() {

    var localctx = new Styling_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PlantUMLParser.RULE_styling_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        _la = this._input.LA(1);
        if(!(_la===PlantUMLParser.INTEGER || _la===PlantUMLParser.FLOAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.attribute_name = function() {
    return this.getTypedRuleContext(Attribute_nameContext,0);
};

AttributeContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

AttributeContext.prototype.attribute_type = function() {
    return this.getTypedRuleContext(Attribute_typeContext,0);
};

AttributeContext.prototype.visibility = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VisibilityContext);
    } else {
        return this.getTypedRuleContext(VisibilityContext,i);
    }
};

AttributeContext.prototype.modifiers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifiersContext);
    } else {
        return this.getTypedRuleContext(ModifiersContext,i);
    }
};

AttributeContext.prototype.attribute_default = function() {
    return this.getTypedRuleContext(Attribute_defaultContext,0);
};

AttributeContext.prototype.NEWLINE = function() {
    return this.getToken(PlantUMLParser.NEWLINE, 0);
};

AttributeContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitAttribute(this);
	}
};

AttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.AttributeContext = AttributeContext;

PlantUMLParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PlantUMLParser.RULE_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (PlantUMLParser.T__32 - 33)) | (1 << (PlantUMLParser.T__33 - 33)) | (1 << (PlantUMLParser.T__34 - 33)) | (1 << (PlantUMLParser.T__35 - 33)) | (1 << (PlantUMLParser.T__36 - 33)) | (1 << (PlantUMLParser.T__37 - 33)) | (1 << (PlantUMLParser.T__38 - 33)) | (1 << (PlantUMLParser.T__39 - 33)) | (1 << (PlantUMLParser.T__40 - 33)))) !== 0)) {
            this.state = 348;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlantUMLParser.T__32:
            case PlantUMLParser.T__33:
            case PlantUMLParser.T__34:
            case PlantUMLParser.T__35:
                this.state = 346;
                this.visibility();
                break;
            case PlantUMLParser.T__36:
            case PlantUMLParser.T__37:
            case PlantUMLParser.T__38:
            case PlantUMLParser.T__39:
            case PlantUMLParser.T__40:
                this.state = 347;
                this.modifiers();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 353;
        this.attribute_name();

        this.state = 354;
        this.match(PlantUMLParser.DOTDOT);
        this.state = 356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 355;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 358;
        this.attribute_type();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__16) {
            this.state = 360;
            this.match(PlantUMLParser.T__16);
            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 361;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 364;
            this.attribute_default();
        }

        this.state = 368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 367;
            this.match(PlantUMLParser.NEWLINE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_attribute_name;
    return this;
}

Attribute_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_nameContext.prototype.constructor = Attribute_nameContext;

Attribute_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Attribute_nameContext.prototype.ARRAY = function() {
    return this.getToken(PlantUMLParser.ARRAY, 0);
};

Attribute_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterAttribute_name(this);
	}
};

Attribute_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitAttribute_name(this);
	}
};

Attribute_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitAttribute_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Attribute_nameContext = Attribute_nameContext;

PlantUMLParser.prototype.attribute_name = function() {

    var localctx = new Attribute_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PlantUMLParser.RULE_attribute_name);
    var _la = 0; // Token type
    try {
        this.state = 376;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.WORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 371; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 370;
                this.match(PlantUMLParser.WORD);
                this.state = 373; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.WORD);
            break;
        case PlantUMLParser.ARRAY:
            this.enterOuterAlt(localctx, 2);
            this.state = 375;
            this.match(PlantUMLParser.ARRAY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_attribute_type;
    return this;
}

Attribute_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_typeContext.prototype.constructor = Attribute_typeContext;

Attribute_typeContext.prototype.attribute_data_type = function() {
    return this.getTypedRuleContext(Attribute_data_typeContext,0);
};

Attribute_typeContext.prototype.ARRAY = function() {
    return this.getToken(PlantUMLParser.ARRAY, 0);
};

Attribute_typeContext.prototype.ANY = function() {
    return this.getToken(PlantUMLParser.ANY, 0);
};

Attribute_typeContext.prototype.ANYARRAY = function() {
    return this.getToken(PlantUMLParser.ANYARRAY, 0);
};

Attribute_typeContext.prototype.nested_argument_type = function() {
    return this.getTypedRuleContext(Nested_argument_typeContext,0);
};

Attribute_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterAttribute_type(this);
	}
};

Attribute_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitAttribute_type(this);
	}
};

Attribute_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitAttribute_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Attribute_typeContext = Attribute_typeContext;

PlantUMLParser.prototype.attribute_type = function() {

    var localctx = new Attribute_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PlantUMLParser.RULE_attribute_type);
    try {
        this.state = 383;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 378;
            this.attribute_data_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 379;
            this.match(PlantUMLParser.ARRAY);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 380;
            this.match(PlantUMLParser.ANY);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 381;
            this.match(PlantUMLParser.ANYARRAY);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 382;
            this.nested_argument_type();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_defaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_attribute_default;
    return this;
}

Attribute_defaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_defaultContext.prototype.constructor = Attribute_defaultContext;

Attribute_defaultContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


Attribute_defaultContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Attribute_defaultContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.INTEGER);
    } else {
        return this.getToken(PlantUMLParser.INTEGER, i);
    }
};


Attribute_defaultContext.prototype.FLOAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.FLOAT);
    } else {
        return this.getToken(PlantUMLParser.FLOAT, i);
    }
};


Attribute_defaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterAttribute_default(this);
	}
};

Attribute_defaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitAttribute_default(this);
	}
};

Attribute_defaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitAttribute_default(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Attribute_defaultContext = Attribute_defaultContext;

PlantUMLParser.prototype.attribute_default = function() {

    var localctx = new Attribute_defaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PlantUMLParser.RULE_attribute_default);
    var _la = 0; // Token type
    try {
        this.state = 445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 386;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            if(la_===1) {
                this.state = 385;
                this.match(PlantUMLParser.QUOTATION);

            }
            this.state = 391;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 388;
                    this.match(PlantUMLParser.WORD); 
                }
                this.state = 393;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
            }

            this.state = 395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 394;
                this.match(PlantUMLParser.QUOTATION);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 398; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 397;
                this.match(PlantUMLParser.INTEGER);
                this.state = 400; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.INTEGER);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 403; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 402;
                this.match(PlantUMLParser.FLOAT);
                this.state = 405; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.FLOAT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 407;
            this.match(PlantUMLParser.T__17);
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 408;
                this.match(PlantUMLParser.QUOTATION);
            }

            this.state = 411;
            _la = this._input.LA(1);
            if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (PlantUMLParser.INTEGER - 56)) | (1 << (PlantUMLParser.FLOAT - 56)) | (1 << (PlantUMLParser.WORD - 56)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 412;
                this.match(PlantUMLParser.QUOTATION);
            }

            this.state = 425;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlantUMLParser.T__8) {
                this.state = 415;
                this.match(PlantUMLParser.T__8);
                this.state = 417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlantUMLParser.QUOTATION) {
                    this.state = 416;
                    this.match(PlantUMLParser.QUOTATION);
                }

                this.state = 419;
                _la = this._input.LA(1);
                if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (PlantUMLParser.INTEGER - 56)) | (1 << (PlantUMLParser.FLOAT - 56)) | (1 << (PlantUMLParser.WORD - 56)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 421;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlantUMLParser.QUOTATION) {
                    this.state = 420;
                    this.match(PlantUMLParser.QUOTATION);
                }

                this.state = 427;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 428;
            this.match(PlantUMLParser.T__18);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 429;
                this.match(PlantUMLParser.QUOTATION);
            }

            this.state = 432;
            this.match(PlantUMLParser.WORD);

            this.state = 434; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 433;
                this.match(PlantUMLParser.INTEGER);
                this.state = 436; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.INTEGER);
            this.state = 439;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
            if(la_===1) {
                this.state = 438;
                this.match(PlantUMLParser.WORD);

            }
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 441;
                this.match(PlantUMLParser.QUOTATION);
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 444;
            this.match(PlantUMLParser.T__19);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_argument_attribute_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_function_argument_attribute_type;
    return this;
}

Function_argument_attribute_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_attribute_typeContext.prototype.constructor = Function_argument_attribute_typeContext;

Function_argument_attribute_typeContext.prototype.attribute_data_type = function() {
    return this.getTypedRuleContext(Attribute_data_typeContext,0);
};

Function_argument_attribute_typeContext.prototype.ARRAY = function() {
    return this.getToken(PlantUMLParser.ARRAY, 0);
};

Function_argument_attribute_typeContext.prototype.ANY = function() {
    return this.getToken(PlantUMLParser.ANY, 0);
};

Function_argument_attribute_typeContext.prototype.ANYARRAY = function() {
    return this.getToken(PlantUMLParser.ANYARRAY, 0);
};

Function_argument_attribute_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterFunction_argument_attribute_type(this);
	}
};

Function_argument_attribute_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitFunction_argument_attribute_type(this);
	}
};

Function_argument_attribute_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitFunction_argument_attribute_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Function_argument_attribute_typeContext = Function_argument_attribute_typeContext;

PlantUMLParser.prototype.function_argument_attribute_type = function() {

    var localctx = new Function_argument_attribute_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PlantUMLParser.RULE_function_argument_attribute_type);
    try {
        this.state = 451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.T__8:
        case PlantUMLParser.T__21:
        case PlantUMLParser.WORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 447;
            this.attribute_data_type();
            break;
        case PlantUMLParser.ARRAY:
            this.enterOuterAlt(localctx, 2);
            this.state = 448;
            this.match(PlantUMLParser.ARRAY);
            break;
        case PlantUMLParser.ANY:
            this.enterOuterAlt(localctx, 3);
            this.state = 449;
            this.match(PlantUMLParser.ANY);
            break;
        case PlantUMLParser.ANYARRAY:
            this.enterOuterAlt(localctx, 4);
            this.state = 450;
            this.match(PlantUMLParser.ANYARRAY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_method;
    return this;
}

MethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodContext.prototype.constructor = MethodContext;

MethodContext.prototype.mathode_name = function() {
    return this.getTypedRuleContext(Mathode_nameContext,0);
};

MethodContext.prototype.visibility = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VisibilityContext);
    } else {
        return this.getTypedRuleContext(VisibilityContext,i);
    }
};

MethodContext.prototype.modifiers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifiersContext);
    } else {
        return this.getTypedRuleContext(ModifiersContext,i);
    }
};

MethodContext.prototype.function_argument_list = function() {
    return this.getTypedRuleContext(Function_argument_listContext,0);
};

MethodContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

MethodContext.prototype.methode_data_type = function() {
    return this.getTypedRuleContext(Methode_data_typeContext,0);
};

MethodContext.prototype.NEWLINE = function() {
    return this.getToken(PlantUMLParser.NEWLINE, 0);
};

MethodContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

MethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterMethod(this);
	}
};

MethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitMethod(this);
	}
};

MethodContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitMethod(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.MethodContext = MethodContext;

PlantUMLParser.prototype.method = function() {

    var localctx = new MethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PlantUMLParser.RULE_method);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (PlantUMLParser.T__32 - 33)) | (1 << (PlantUMLParser.T__33 - 33)) | (1 << (PlantUMLParser.T__34 - 33)) | (1 << (PlantUMLParser.T__35 - 33)) | (1 << (PlantUMLParser.T__36 - 33)) | (1 << (PlantUMLParser.T__37 - 33)) | (1 << (PlantUMLParser.T__38 - 33)) | (1 << (PlantUMLParser.T__39 - 33)) | (1 << (PlantUMLParser.T__40 - 33)))) !== 0)) {
            this.state = 455;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlantUMLParser.T__32:
            case PlantUMLParser.T__33:
            case PlantUMLParser.T__34:
            case PlantUMLParser.T__35:
                this.state = 453;
                this.visibility();
                break;
            case PlantUMLParser.T__36:
            case PlantUMLParser.T__37:
            case PlantUMLParser.T__38:
            case PlantUMLParser.T__39:
            case PlantUMLParser.T__40:
                this.state = 454;
                this.modifiers();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 460;
        this.mathode_name();
        this.state = 461;
        this.match(PlantUMLParser.T__20);
        this.state = 463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__10 || _la===PlantUMLParser.WORD || _la===PlantUMLParser.DOTDOT) {
            this.state = 462;
            this.function_argument_list();
        }

        this.state = 465;
        this.match(PlantUMLParser.T__21);
        this.state = 471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.DOTDOT) {
            this.state = 466;
            this.match(PlantUMLParser.DOTDOT);
            this.state = 468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 467;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 470;
            this.methode_data_type();
        }

        this.state = 474;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 473;
            this.match(PlantUMLParser.NEWLINE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Mathode_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_mathode_name;
    return this;
}

Mathode_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mathode_nameContext.prototype.constructor = Mathode_nameContext;

Mathode_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Mathode_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterMathode_name(this);
	}
};

Mathode_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitMathode_name(this);
	}
};

Mathode_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitMathode_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Mathode_nameContext = Mathode_nameContext;

PlantUMLParser.prototype.mathode_name = function() {

    var localctx = new Mathode_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PlantUMLParser.RULE_mathode_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 476;
            this.match(PlantUMLParser.WORD);
            this.state = 479; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlantUMLParser.WORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.declaration_name = function() {
    return this.getTypedRuleContext(Declaration_nameContext,0);
};

DeclarationContext.prototype.declaration_argument = function() {
    return this.getTypedRuleContext(Declaration_argumentContext,0);
};

DeclarationContext.prototype.visibility = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VisibilityContext);
    } else {
        return this.getTypedRuleContext(VisibilityContext,i);
    }
};

DeclarationContext.prototype.modifiers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifiersContext);
    } else {
        return this.getTypedRuleContext(ModifiersContext,i);
    }
};

DeclarationContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


DeclarationContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


DeclarationContext.prototype.NEWLINE = function() {
    return this.getToken(PlantUMLParser.NEWLINE, 0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitDeclaration(this);
	}
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.DeclarationContext = DeclarationContext;

PlantUMLParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PlantUMLParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (PlantUMLParser.T__32 - 33)) | (1 << (PlantUMLParser.T__33 - 33)) | (1 << (PlantUMLParser.T__34 - 33)) | (1 << (PlantUMLParser.T__35 - 33)) | (1 << (PlantUMLParser.T__36 - 33)) | (1 << (PlantUMLParser.T__37 - 33)) | (1 << (PlantUMLParser.T__38 - 33)) | (1 << (PlantUMLParser.T__39 - 33)) | (1 << (PlantUMLParser.T__40 - 33)))) !== 0)) {
            this.state = 483;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlantUMLParser.T__32:
            case PlantUMLParser.T__33:
            case PlantUMLParser.T__34:
            case PlantUMLParser.T__35:
                this.state = 481;
                this.visibility();
                break;
            case PlantUMLParser.T__36:
            case PlantUMLParser.T__37:
            case PlantUMLParser.T__38:
            case PlantUMLParser.T__39:
            case PlantUMLParser.T__40:
                this.state = 482;
                this.modifiers();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 488;
        this.declaration_name();
        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 489;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 492;
        this.match(PlantUMLParser.T__16);
        this.state = 494;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 493;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 496;
            this.match(PlantUMLParser.QUOTATION);

        }
        this.state = 499;
        this.declaration_argument();
        this.state = 501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 500;
            this.match(PlantUMLParser.QUOTATION);
        }

        this.state = 504;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 503;
            this.match(PlantUMLParser.NEWLINE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Declaration_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_declaration_name;
    return this;
}

Declaration_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_nameContext.prototype.constructor = Declaration_nameContext;

Declaration_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Declaration_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterDeclaration_name(this);
	}
};

Declaration_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitDeclaration_name(this);
	}
};

Declaration_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitDeclaration_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Declaration_nameContext = Declaration_nameContext;

PlantUMLParser.prototype.declaration_name = function() {

    var localctx = new Declaration_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PlantUMLParser.RULE_declaration_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 507; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 506;
            this.match(PlantUMLParser.WORD);
            this.state = 509; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlantUMLParser.WORD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Declaration_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_declaration_argument;
    return this;
}

Declaration_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_argumentContext.prototype.constructor = Declaration_argumentContext;

Declaration_argumentContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Declaration_argumentContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.INTEGER);
    } else {
        return this.getToken(PlantUMLParser.INTEGER, i);
    }
};


Declaration_argumentContext.prototype.FLOAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.FLOAT);
    } else {
        return this.getToken(PlantUMLParser.FLOAT, i);
    }
};


Declaration_argumentContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


Declaration_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterDeclaration_argument(this);
	}
};

Declaration_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitDeclaration_argument(this);
	}
};

Declaration_argumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitDeclaration_argument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Declaration_argumentContext = Declaration_argumentContext;

PlantUMLParser.prototype.declaration_argument = function() {

    var localctx = new Declaration_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PlantUMLParser.RULE_declaration_argument);
    var _la = 0; // Token type
    try {
        this.state = 559;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 514;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 511;
                    this.match(PlantUMLParser.WORD); 
                }
                this.state = 516;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 518; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 517;
                this.match(PlantUMLParser.INTEGER);
                this.state = 520; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.INTEGER);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 523; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 522;
                this.match(PlantUMLParser.FLOAT);
                this.state = 525; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.FLOAT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 527;
            this.match(PlantUMLParser.T__17);
            this.state = 529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 528;
                this.match(PlantUMLParser.QUOTATION);
            }

            this.state = 531;
            _la = this._input.LA(1);
            if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (PlantUMLParser.INTEGER - 56)) | (1 << (PlantUMLParser.FLOAT - 56)) | (1 << (PlantUMLParser.WORD - 56)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.QUOTATION) {
                this.state = 532;
                this.match(PlantUMLParser.QUOTATION);
            }

            this.state = 545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlantUMLParser.T__8) {
                this.state = 535;
                this.match(PlantUMLParser.T__8);
                this.state = 537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlantUMLParser.QUOTATION) {
                    this.state = 536;
                    this.match(PlantUMLParser.QUOTATION);
                }

                this.state = 539;
                _la = this._input.LA(1);
                if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (PlantUMLParser.INTEGER - 56)) | (1 << (PlantUMLParser.FLOAT - 56)) | (1 << (PlantUMLParser.WORD - 56)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlantUMLParser.QUOTATION) {
                    this.state = 540;
                    this.match(PlantUMLParser.QUOTATION);
                }

                this.state = 547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 548;
            this.match(PlantUMLParser.T__18);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 549;
            this.match(PlantUMLParser.WORD);

            this.state = 551; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 550;
                this.match(PlantUMLParser.INTEGER);
                this.state = 553; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.INTEGER);
            this.state = 556;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 555;
                this.match(PlantUMLParser.WORD);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 558;
            this.match(PlantUMLParser.T__19);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiplicityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_multiplicity;
    return this;
}

MultiplicityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicityContext.prototype.constructor = MultiplicityContext;

MultiplicityContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


MultiplicityContext.prototype.INTEGER = function() {
    return this.getToken(PlantUMLParser.INTEGER, 0);
};

MultiplicityContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterMultiplicity(this);
	}
};

MultiplicityContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitMultiplicity(this);
	}
};

MultiplicityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitMultiplicity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.MultiplicityContext = MultiplicityContext;

PlantUMLParser.prototype.multiplicity = function() {

    var localctx = new MultiplicityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PlantUMLParser.RULE_multiplicity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.T__22:
            this.state = 561;
            this.match(PlantUMLParser.T__22);
            break;
        case PlantUMLParser.T__23:
            this.state = 562;
            this.match(PlantUMLParser.T__23);
            break;
        case PlantUMLParser.T__24:
            this.state = 563;
            this.match(PlantUMLParser.T__24);
            break;
        case PlantUMLParser.T__25:
            this.state = 564;
            this.match(PlantUMLParser.T__25);
            break;
        case PlantUMLParser.T__26:
            this.state = 565;
            this.match(PlantUMLParser.T__26);
            break;
        case PlantUMLParser.T__27:
            this.state = 566;
            this.match(PlantUMLParser.T__27);
            break;
        case PlantUMLParser.QUOTATION:
            this.state = 567;
            this.match(PlantUMLParser.QUOTATION);
            this.state = 568;
            this.match(PlantUMLParser.INTEGER);
            this.state = 569;
            this.match(PlantUMLParser.QUOTATION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Connection_leftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_connection_left;
    this.instance = null; // Connection_nameContext
    this.mult = null; // MultiplicityContext
    return this;
}

Connection_leftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Connection_leftContext.prototype.constructor = Connection_leftContext;

Connection_leftContext.prototype.connection_name = function() {
    return this.getTypedRuleContext(Connection_nameContext,0);
};

Connection_leftContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

Connection_leftContext.prototype.multiplicity = function() {
    return this.getTypedRuleContext(MultiplicityContext,0);
};

Connection_leftContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterConnection_left(this);
	}
};

Connection_leftContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitConnection_left(this);
	}
};

Connection_leftContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitConnection_left(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Connection_leftContext = Connection_leftContext;

PlantUMLParser.prototype.connection_left = function() {

    var localctx = new Connection_leftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PlantUMLParser.RULE_connection_left);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        localctx.instance = this.connection_name();
        this.state = 574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 573;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlantUMLParser.T__22) | (1 << PlantUMLParser.T__23) | (1 << PlantUMLParser.T__24) | (1 << PlantUMLParser.T__25) | (1 << PlantUMLParser.T__26) | (1 << PlantUMLParser.T__27))) !== 0) || _la===PlantUMLParser.QUOTATION) {
            this.state = 576;
            localctx.mult = this.multiplicity();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Connection_rightContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_connection_right;
    this.mult = null; // MultiplicityContext
    this.instance = null; // Connection_nameContext
    return this;
}

Connection_rightContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Connection_rightContext.prototype.constructor = Connection_rightContext;

Connection_rightContext.prototype.connection_name = function() {
    return this.getTypedRuleContext(Connection_nameContext,0);
};

Connection_rightContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

Connection_rightContext.prototype.multiplicity = function() {
    return this.getTypedRuleContext(MultiplicityContext,0);
};

Connection_rightContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterConnection_right(this);
	}
};

Connection_rightContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitConnection_right(this);
	}
};

Connection_rightContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitConnection_right(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Connection_rightContext = Connection_rightContext;

PlantUMLParser.prototype.connection_right = function() {

    var localctx = new Connection_rightContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PlantUMLParser.RULE_connection_right);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlantUMLParser.T__22) | (1 << PlantUMLParser.T__23) | (1 << PlantUMLParser.T__24) | (1 << PlantUMLParser.T__25) | (1 << PlantUMLParser.T__26) | (1 << PlantUMLParser.T__27))) !== 0) || _la===PlantUMLParser.QUOTATION) {
            this.state = 579;
            localctx.mult = this.multiplicity();
        }

        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 582;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 585;
        localctx.instance = this.connection_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConnectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_connection;
    this.left = null; // Connection_leftContext
    this.right = null; // Connection_rightContext
    return this;
}

ConnectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConnectionContext.prototype.constructor = ConnectionContext;

ConnectionContext.prototype.connection_symbol = function() {
    return this.getTypedRuleContext(Connection_symbolContext,0);
};

ConnectionContext.prototype.connection_left = function() {
    return this.getTypedRuleContext(Connection_leftContext,0);
};

ConnectionContext.prototype.connection_right = function() {
    return this.getTypedRuleContext(Connection_rightContext,0);
};

ConnectionContext.prototype.connection_points = function() {
    return this.getTypedRuleContext(Connection_pointsContext,0);
};

ConnectionContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.NEWLINE);
    } else {
        return this.getToken(PlantUMLParser.NEWLINE, i);
    }
};


ConnectionContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

ConnectionContext.prototype.stereotype = function() {
    return this.getTypedRuleContext(StereotypeContext,0);
};

ConnectionContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


ConnectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterConnection(this);
	}
};

ConnectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitConnection(this);
	}
};

ConnectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitConnection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.ConnectionContext = ConnectionContext;

PlantUMLParser.prototype.connection = function() {

    var localctx = new ConnectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PlantUMLParser.RULE_connection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__28) {
            this.state = 587;
            this.connection_points();
            this.state = 588;
            this.match(PlantUMLParser.NEWLINE);
        }

        this.state = 592;
        localctx.left = this.connection_left();
        this.state = 593;
        this.connection_symbol();
        this.state = 594;
        localctx.right = this.connection_right();
        this.state = 603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.DOTDOT || _la===PlantUMLParser.WHITESPACE) {
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 595;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 598;
            this.match(PlantUMLParser.DOTDOT);
            this.state = 600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 599;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 602;
            this.stereotype();
        }

        this.state = 606;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 605;
            this.match(PlantUMLParser.NEWLINE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Connection_pointsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_connection_points;
    return this;
}

Connection_pointsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Connection_pointsContext.prototype.constructor = Connection_pointsContext;

Connection_pointsContext.prototype.point_array = function() {
    return this.getTypedRuleContext(Point_arrayContext,0);
};

Connection_pointsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterConnection_points(this);
	}
};

Connection_pointsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitConnection_points(this);
	}
};

Connection_pointsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitConnection_points(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Connection_pointsContext = Connection_pointsContext;

PlantUMLParser.prototype.connection_points = function() {

    var localctx = new Connection_pointsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PlantUMLParser.RULE_connection_points);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        this.match(PlantUMLParser.T__28);
        this.state = 609;
        this.point_array();
        this.state = 610;
        this.match(PlantUMLParser.T__29);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Point_arrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_point_array;
    this.pts = null; // PointsContext
    return this;
}

Point_arrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Point_arrayContext.prototype.constructor = Point_arrayContext;

Point_arrayContext.prototype.points = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PointsContext);
    } else {
        return this.getTypedRuleContext(PointsContext,i);
    }
};

Point_arrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterPoint_array(this);
	}
};

Point_arrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitPoint_array(this);
	}
};

Point_arrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitPoint_array(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Point_arrayContext = Point_arrayContext;

PlantUMLParser.prototype.point_array = function() {

    var localctx = new Point_arrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PlantUMLParser.RULE_point_array);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(PlantUMLParser.T__17);
        this.state = 616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlantUMLParser.T__30) {
            this.state = 613;
            localctx.pts = this.points();
            this.state = 618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 619;
        this.match(PlantUMLParser.T__18);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PointsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_points;
    this.x = null; // Token
    this.y = null; // Token
    return this;
}

PointsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointsContext.prototype.constructor = PointsContext;

PointsContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.INTEGER);
    } else {
        return this.getToken(PlantUMLParser.INTEGER, i);
    }
};


PointsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterPoints(this);
	}
};

PointsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitPoints(this);
	}
};

PointsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitPoints(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.PointsContext = PointsContext;

PlantUMLParser.prototype.points = function() {

    var localctx = new PointsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PlantUMLParser.RULE_points);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(PlantUMLParser.T__30);
        this.state = 622;
        localctx.x = this.match(PlantUMLParser.INTEGER);
        this.state = 623;
        this.match(PlantUMLParser.T__31);
        this.state = 624;
        localctx.y = this.match(PlantUMLParser.INTEGER);
        this.state = 625;
        this.match(PlantUMLParser.T__12);
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__8) {
            this.state = 626;
            this.match(PlantUMLParser.T__8);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Connection_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_connection_symbol;
    return this;
}

Connection_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Connection_symbolContext.prototype.constructor = Connection_symbolContext;

Connection_symbolContext.prototype.CONNECTOR = function() {
    return this.getToken(PlantUMLParser.CONNECTOR, 0);
};

Connection_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterConnection_symbol(this);
	}
};

Connection_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitConnection_symbol(this);
	}
};

Connection_symbolContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitConnection_symbol(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Connection_symbolContext = Connection_symbolContext;

PlantUMLParser.prototype.connection_symbol = function() {

    var localctx = new Connection_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PlantUMLParser.RULE_connection_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.match(PlantUMLParser.CONNECTOR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_visibility;
    return this;
}

VisibilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityContext.prototype.constructor = VisibilityContext;


VisibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterVisibility(this);
	}
};

VisibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitVisibility(this);
	}
};

VisibilityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitVisibility(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.VisibilityContext = VisibilityContext;

PlantUMLParser.prototype.visibility = function() {

    var localctx = new VisibilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PlantUMLParser.RULE_visibility);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        _la = this._input.LA(1);
        if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (PlantUMLParser.T__32 - 33)) | (1 << (PlantUMLParser.T__33 - 33)) | (1 << (PlantUMLParser.T__34 - 33)) | (1 << (PlantUMLParser.T__35 - 33)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_function_argument;
    return this;
}

Function_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argumentContext.prototype.constructor = Function_argumentContext;

Function_argumentContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Function_argumentContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

Function_argumentContext.prototype.function_argument_attribute_type = function() {
    return this.getTypedRuleContext(Function_argument_attribute_typeContext,0);
};

Function_argumentContext.prototype.nested_argument_type = function() {
    return this.getTypedRuleContext(Nested_argument_typeContext,0);
};

Function_argumentContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

Function_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterFunction_argument(this);
	}
};

Function_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitFunction_argument(this);
	}
};

Function_argumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitFunction_argument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Function_argumentContext = Function_argumentContext;

PlantUMLParser.prototype.function_argument = function() {

    var localctx = new Function_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PlantUMLParser.RULE_function_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.variable_name();
        this.state = 634;
        this.match(PlantUMLParser.DOTDOT);
        this.state = 636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.WHITESPACE) {
            this.state = 635;
            this.match(PlantUMLParser.WHITESPACE);
        }

        this.state = 640;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.state = 638;
            this.function_argument_attribute_type();
            break;

        case 2:
            this.state = 639;
            this.nested_argument_type();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nested_argument_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_nested_argument_type;
    return this;
}

Nested_argument_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nested_argument_typeContext.prototype.constructor = Nested_argument_typeContext;

Nested_argument_typeContext.prototype.attribute_data_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_data_typeContext);
    } else {
        return this.getTypedRuleContext(Attribute_data_typeContext,i);
    }
};

Nested_argument_typeContext.prototype.ARRAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.ARRAY);
    } else {
        return this.getToken(PlantUMLParser.ARRAY, i);
    }
};


Nested_argument_typeContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.ANY);
    } else {
        return this.getToken(PlantUMLParser.ANY, i);
    }
};


Nested_argument_typeContext.prototype.ANYARRAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.ANYARRAY);
    } else {
        return this.getToken(PlantUMLParser.ANYARRAY, i);
    }
};


Nested_argument_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterNested_argument_type(this);
	}
};

Nested_argument_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitNested_argument_type(this);
	}
};

Nested_argument_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitNested_argument_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Nested_argument_typeContext = Nested_argument_typeContext;

PlantUMLParser.prototype.nested_argument_type = function() {

    var localctx = new Nested_argument_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PlantUMLParser.RULE_nested_argument_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.T__10:
        case PlantUMLParser.WORD:
            this.state = 642;
            this.attribute_data_type();
            break;
        case PlantUMLParser.ARRAY:
            this.state = 643;
            this.match(PlantUMLParser.ARRAY);
            break;
        case PlantUMLParser.ANY:
            this.state = 644;
            this.match(PlantUMLParser.ANY);
            break;
        case PlantUMLParser.ANYARRAY:
            this.state = 645;
            this.match(PlantUMLParser.ANYARRAY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 655; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 648;
            this.match(PlantUMLParser.T__10);
            this.state = 653;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
            switch(la_) {
            case 1:
                this.state = 649;
                this.attribute_data_type();
                break;

            case 2:
                this.state = 650;
                this.match(PlantUMLParser.ARRAY);
                break;

            case 3:
                this.state = 651;
                this.match(PlantUMLParser.ANY);
                break;

            case 4:
                this.state = 652;
                this.match(PlantUMLParser.ANYARRAY);
                break;

            }
            this.state = 657; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlantUMLParser.T__10);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_function_argument_list;
    return this;
}

Function_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_listContext.prototype.constructor = Function_argument_listContext;

Function_argument_listContext.prototype.function_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_argumentContext);
    } else {
        return this.getTypedRuleContext(Function_argumentContext,i);
    }
};

Function_argument_listContext.prototype.WHITESPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WHITESPACE);
    } else {
        return this.getToken(PlantUMLParser.WHITESPACE, i);
    }
};


Function_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterFunction_argument_list(this);
	}
};

Function_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitFunction_argument_list(this);
	}
};

Function_argument_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitFunction_argument_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Function_argument_listContext = Function_argument_listContext;

PlantUMLParser.prototype.function_argument_list = function() {

    var localctx = new Function_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PlantUMLParser.RULE_function_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 659;
        this.function_argument();
        this.state = 667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlantUMLParser.T__8) {
            this.state = 660;
            this.match(PlantUMLParser.T__8);
            this.state = 662;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 661;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 664;
            this.function_argument();
            this.state = 669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Template_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_template_argument;
    return this;
}

Template_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Template_argumentContext.prototype.constructor = Template_argumentContext;

Template_argumentContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Template_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterTemplate_argument(this);
	}
};

Template_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitTemplate_argument(this);
	}
};

Template_argumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitTemplate_argument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Template_argumentContext = Template_argumentContext;

PlantUMLParser.prototype.template_argument = function() {

    var localctx = new Template_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PlantUMLParser.RULE_template_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.type_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Template_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_template_argument_list;
    return this;
}

Template_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Template_argument_listContext.prototype.constructor = Template_argument_listContext;

Template_argument_listContext.prototype.template_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Template_argumentContext);
    } else {
        return this.getTypedRuleContext(Template_argumentContext,i);
    }
};

Template_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterTemplate_argument_list(this);
	}
};

Template_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitTemplate_argument_list(this);
	}
};

Template_argument_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitTemplate_argument_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Template_argument_listContext = Template_argument_listContext;

PlantUMLParser.prototype.template_argument_list = function() {

    var localctx = new Template_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PlantUMLParser.RULE_template_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this.template_argument();
        this.state = 677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlantUMLParser.T__8) {
            this.state = 673;
            this.match(PlantUMLParser.T__8);
            this.state = 674;
            this.template_argument();
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_ident;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


IdentContext.prototype.any_except_newline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Any_except_newlineContext);
    } else {
        return this.getTypedRuleContext(Any_except_newlineContext,i);
    }
};

IdentContext.prototype.AS = function() {
    return this.getToken(PlantUMLParser.AS, 0);
};

IdentContext.prototype.attribute_type = function() {
    return this.getTypedRuleContext(Attribute_typeContext,0);
};

IdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterIdent(this);
	}
};

IdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitIdent(this);
	}
};

IdentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitIdent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.IdentContext = IdentContext;

PlantUMLParser.prototype.ident = function() {

    var localctx = new IdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PlantUMLParser.RULE_ident);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 680;
            this.match(PlantUMLParser.QUOTATION);
        }

        this.state = 684; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 683;
        		this.any_except_newline();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 686; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,114, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 689;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 688;
            this.match(PlantUMLParser.QUOTATION);

        }
        this.state = 693;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 691;
            this.match(PlantUMLParser.AS);
            this.state = 692;
            this.attribute_type();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Methode_data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_methode_data_type;
    return this;
}

Methode_data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Methode_data_typeContext.prototype.constructor = Methode_data_typeContext;

Methode_data_typeContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Methode_data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterMethode_data_type(this);
	}
};

Methode_data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitMethode_data_type(this);
	}
};

Methode_data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitMethode_data_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Methode_data_typeContext = Methode_data_typeContext;

PlantUMLParser.prototype.methode_data_type = function() {

    var localctx = new Methode_data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PlantUMLParser.RULE_methode_data_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 695;
                this.match(PlantUMLParser.WORD); 
            }
            this.state = 700;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_attribute_data_type;
    return this;
}

Attribute_data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_data_typeContext.prototype.constructor = Attribute_data_typeContext;

Attribute_data_typeContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Attribute_data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterAttribute_data_type(this);
	}
};

Attribute_data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitAttribute_data_type(this);
	}
};

Attribute_data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitAttribute_data_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Attribute_data_typeContext = Attribute_data_typeContext;

PlantUMLParser.prototype.attribute_data_type = function() {

    var localctx = new Attribute_data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PlantUMLParser.RULE_attribute_data_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 701;
                this.match(PlantUMLParser.WORD); 
            }
            this.state = 706;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_data_type;
    return this;
}

Data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typeContext.prototype.constructor = Data_typeContext;

Data_typeContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterData_type(this);
	}
};

Data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitData_type(this);
	}
};

Data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitData_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Data_typeContext = Data_typeContext;

PlantUMLParser.prototype.data_type = function() {

    var localctx = new Data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PlantUMLParser.RULE_data_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlantUMLParser.WORD) {
            this.state = 707;
            this.match(PlantUMLParser.WORD);
            this.state = 712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_variable_name;
    return this;
}

Variable_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_nameContext.prototype.constructor = Variable_nameContext;

Variable_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Variable_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterVariable_name(this);
	}
};

Variable_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitVariable_name(this);
	}
};

Variable_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitVariable_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Variable_nameContext = Variable_nameContext;

PlantUMLParser.prototype.variable_name = function() {

    var localctx = new Variable_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PlantUMLParser.RULE_variable_name);
    var _la = 0; // Token type
    try {
        this.state = 726;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlantUMLParser.WORD) {
                this.state = 713;
                this.match(PlantUMLParser.WORD);
                this.state = 718;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 722;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlantUMLParser.WORD) {
                this.state = 719;
                this.match(PlantUMLParser.WORD);
                this.state = 724;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 725;
            this.match(PlantUMLParser.T__10);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Connection_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_connection_name;
    return this;
}

Connection_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Connection_nameContext.prototype.constructor = Connection_nameContext;

Connection_nameContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Connection_nameContext.prototype.WHITESPACE = function() {
    return this.getToken(PlantUMLParser.WHITESPACE, 0);
};

Connection_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterConnection_name(this);
	}
};

Connection_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitConnection_name(this);
	}
};

Connection_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitConnection_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Connection_nameContext = Connection_nameContext;

PlantUMLParser.prototype.connection_name = function() {

    var localctx = new Connection_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PlantUMLParser.RULE_connection_name);
    var _la = 0; // Token type
    try {
        this.state = 737;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.WORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 728;
            this.match(PlantUMLParser.WORD);
            break;
        case PlantUMLParser.T__20:
            this.enterOuterAlt(localctx, 2);
            this.state = 729;
            this.match(PlantUMLParser.T__20);
            this.state = 730;
            this.match(PlantUMLParser.WORD);
            this.state = 731;
            this.match(PlantUMLParser.T__8);
            this.state = 733;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlantUMLParser.WHITESPACE) {
                this.state = 732;
                this.match(PlantUMLParser.WHITESPACE);
            }

            this.state = 735;
            this.match(PlantUMLParser.WORD);
            this.state = 736;
            this.match(PlantUMLParser.T__21);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_modifiers;
    this.static_mod = null; // Token
    this.abstract_mod = null; // Token
    return this;
}

ModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifiersContext.prototype.constructor = ModifiersContext;


ModifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterModifiers(this);
	}
};

ModifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitModifiers(this);
	}
};

ModifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitModifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.ModifiersContext = ModifiersContext;

PlantUMLParser.prototype.modifiers = function() {

    var localctx = new ModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PlantUMLParser.RULE_modifiers);
    try {
        this.state = 744;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlantUMLParser.T__36:
            this.enterOuterAlt(localctx, 1);
            this.state = 739;
            localctx.static_mod = this.match(PlantUMLParser.T__36);
            break;
        case PlantUMLParser.T__37:
            this.enterOuterAlt(localctx, 2);
            this.state = 740;
            localctx.abstract_mod = this.match(PlantUMLParser.T__37);
            break;
        case PlantUMLParser.T__38:
            this.enterOuterAlt(localctx, 3);
            this.state = 741;
            this.match(PlantUMLParser.T__38);
            break;
        case PlantUMLParser.T__39:
            this.enterOuterAlt(localctx, 4);
            this.state = 742;
            this.match(PlantUMLParser.T__39);
            break;
        case PlantUMLParser.T__40:
            this.enterOuterAlt(localctx, 5);
            this.state = 743;
            this.match(PlantUMLParser.T__40);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StereotypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_stereotype;
    this._ident = null; // IdentContext
    this.args = []; // of IdentContexts
    return this;
}

StereotypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StereotypeContext.prototype.constructor = StereotypeContext;

StereotypeContext.prototype.QUOTATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.QUOTATION);
    } else {
        return this.getToken(PlantUMLParser.QUOTATION, i);
    }
};


StereotypeContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

StereotypeContext.prototype.DOTDOT = function() {
    return this.getToken(PlantUMLParser.DOTDOT, 0);
};

StereotypeContext.prototype.stereotype_value = function() {
    return this.getTypedRuleContext(Stereotype_valueContext,0);
};

StereotypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterStereotype(this);
	}
};

StereotypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitStereotype(this);
	}
};

StereotypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitStereotype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.StereotypeContext = StereotypeContext;

PlantUMLParser.prototype.stereotype = function() {

    var localctx = new StereotypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PlantUMLParser.RULE_stereotype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 746;
            this.match(PlantUMLParser.QUOTATION);

        }
        this.state = 762;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 749;
                this.ident();
                this.state = 755;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
                if(la_===1) {
                    this.state = 750;
                    this.match(PlantUMLParser.T__20);
                    this.state = 752;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PlantUMLParser.DIRECTION - 45)) | (1 << (PlantUMLParser.NOTE - 45)) | (1 << (PlantUMLParser.CLASS - 45)) | (1 << (PlantUMLParser.INTERFACE - 45)) | (1 << (PlantUMLParser.ABSTRACT - 45)) | (1 << (PlantUMLParser.OBJECT - 45)) | (1 << (PlantUMLParser.PACKAGE - 45)) | (1 << (PlantUMLParser.AS - 45)) | (1 << (PlantUMLParser.ARRAY - 45)) | (1 << (PlantUMLParser.INTEGER - 45)) | (1 << (PlantUMLParser.FLOAT - 45)) | (1 << (PlantUMLParser.WORD - 45)) | (1 << (PlantUMLParser.ANYARRAY - 45)) | (1 << (PlantUMLParser.ANY - 45)) | (1 << (PlantUMLParser.QUOTATION - 45)))) !== 0)) {
                        this.state = 751;
                        localctx._ident = this.ident();
                        localctx.args.push(localctx._ident);
                    }

                    this.state = 754;
                    this.match(PlantUMLParser.T__21);

                }
                this.state = 758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlantUMLParser.T__41) {
                    this.state = 757;
                    this.match(PlantUMLParser.T__41);
                }
         
            }
            this.state = 764;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.DOTDOT) {
            this.state = 765;
            this.match(PlantUMLParser.DOTDOT);
            this.state = 766;
            this.stereotype_value();
        }

        this.state = 770;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.QUOTATION) {
            this.state = 769;
            this.match(PlantUMLParser.QUOTATION);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Stereotype_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_stereotype_value;
    return this;
}

Stereotype_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stereotype_valueContext.prototype.constructor = Stereotype_valueContext;

Stereotype_valueContext.prototype.WORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.WORD);
    } else {
        return this.getToken(PlantUMLParser.WORD, i);
    }
};


Stereotype_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterStereotype_value(this);
	}
};

Stereotype_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitStereotype_value(this);
	}
};

Stereotype_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitStereotype_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Stereotype_valueContext = Stereotype_valueContext;

PlantUMLParser.prototype.stereotype_value = function() {

    var localctx = new Stereotype_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PlantUMLParser.RULE_stereotype_value);
    var _la = 0; // Token type
    try {
        this.state = 791;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 772;
            this.match(PlantUMLParser.WORD);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 773;
            this.match(PlantUMLParser.WORD);
            this.state = 774;
            this.match(PlantUMLParser.T__10);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 775;
            this.match(PlantUMLParser.WORD);
            this.state = 778; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 776;
                this.match(PlantUMLParser.T__10);
                this.state = 777;
                this.match(PlantUMLParser.WORD);
                this.state = 780; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.T__10);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 782;
            this.match(PlantUMLParser.WORD);
            this.state = 785; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 783;
                this.match(PlantUMLParser.T__41);
                this.state = 784;
                this.match(PlantUMLParser.WORD);
                this.state = 787; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlantUMLParser.T__41);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 789;
            this.match(PlantUMLParser.WORD);
            this.state = 790;
            this.match(PlantUMLParser.T__41);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_type_declaration;
    return this;
}

Type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_declarationContext.prototype.constructor = Type_declarationContext;


 
Type_declarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function List_typeContext(parser, ctx) {
	Type_declarationContext.call(this, parser);
    Type_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

List_typeContext.prototype = Object.create(Type_declarationContext.prototype);
List_typeContext.prototype.constructor = List_typeContext;

PlantUMLParser.List_typeContext = List_typeContext;

List_typeContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};
List_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterList_type(this);
	}
};

List_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitList_type(this);
	}
};

List_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitList_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Simple_typeContext(parser, ctx) {
	Type_declarationContext.call(this, parser);
    Type_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Simple_typeContext.prototype = Object.create(Type_declarationContext.prototype);
Simple_typeContext.prototype.constructor = Simple_typeContext;

PlantUMLParser.Simple_typeContext = Simple_typeContext;

Simple_typeContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};
Simple_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterSimple_type(this);
	}
};

Simple_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitSimple_type(this);
	}
};

Simple_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitSimple_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Template_typeContext(parser, ctx) {
	Type_declarationContext.call(this, parser);
    Type_declarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Template_typeContext.prototype = Object.create(Type_declarationContext.prototype);
Template_typeContext.prototype.constructor = Template_typeContext;

PlantUMLParser.Template_typeContext = Template_typeContext;

Template_typeContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

Template_typeContext.prototype.template_argument_list = function() {
    return this.getTypedRuleContext(Template_argument_listContext,0);
};
Template_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterTemplate_type(this);
	}
};

Template_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitTemplate_type(this);
	}
};

Template_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitTemplate_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PlantUMLParser.Type_declarationContext = Type_declarationContext;

PlantUMLParser.prototype.type_declaration = function() {

    var localctx = new Type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PlantUMLParser.RULE_type_declaration);
    var _la = 0; // Token type
    try {
        this.state = 805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Template_typeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 793;
            this.ident();
            this.state = 794;
            this.match(PlantUMLParser.T__4);
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PlantUMLParser.DIRECTION - 45)) | (1 << (PlantUMLParser.NOTE - 45)) | (1 << (PlantUMLParser.CLASS - 45)) | (1 << (PlantUMLParser.INTERFACE - 45)) | (1 << (PlantUMLParser.ABSTRACT - 45)) | (1 << (PlantUMLParser.OBJECT - 45)) | (1 << (PlantUMLParser.PACKAGE - 45)) | (1 << (PlantUMLParser.AS - 45)) | (1 << (PlantUMLParser.ARRAY - 45)) | (1 << (PlantUMLParser.INTEGER - 45)) | (1 << (PlantUMLParser.FLOAT - 45)) | (1 << (PlantUMLParser.WORD - 45)) | (1 << (PlantUMLParser.ANYARRAY - 45)) | (1 << (PlantUMLParser.ANY - 45)) | (1 << (PlantUMLParser.QUOTATION - 45)))) !== 0)) {
                this.state = 795;
                this.template_argument_list();
            }

            this.state = 798;
            this.match(PlantUMLParser.T__5);
            break;

        case 2:
            localctx = new List_typeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 800;
            this.ident();
            this.state = 801;
            this.match(PlantUMLParser.T__17);
            this.state = 802;
            this.match(PlantUMLParser.T__18);
            break;

        case 3:
            localctx = new Simple_typeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 804;
            this.ident();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Item_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_item_list;
    return this;
}

Item_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Item_listContext.prototype.constructor = Item_listContext;

Item_listContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

Item_listContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlantUMLParser.NEWLINE);
    } else {
        return this.getToken(PlantUMLParser.NEWLINE, i);
    }
};


Item_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterItem_list(this);
	}
};

Item_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitItem_list(this);
	}
};

Item_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitItem_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Item_listContext = Item_listContext;

PlantUMLParser.prototype.item_list = function() {

    var localctx = new Item_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PlantUMLParser.RULE_item_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 810; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 807;
            this.ident();
            this.state = 808;
            this.match(PlantUMLParser.NEWLINE);
            this.state = 812; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PlantUMLParser.DIRECTION - 45)) | (1 << (PlantUMLParser.NOTE - 45)) | (1 << (PlantUMLParser.CLASS - 45)) | (1 << (PlantUMLParser.INTERFACE - 45)) | (1 << (PlantUMLParser.ABSTRACT - 45)) | (1 << (PlantUMLParser.OBJECT - 45)) | (1 << (PlantUMLParser.PACKAGE - 45)) | (1 << (PlantUMLParser.AS - 45)) | (1 << (PlantUMLParser.ARRAY - 45)) | (1 << (PlantUMLParser.INTEGER - 45)) | (1 << (PlantUMLParser.FLOAT - 45)) | (1 << (PlantUMLParser.WORD - 45)) | (1 << (PlantUMLParser.ANYARRAY - 45)) | (1 << (PlantUMLParser.ANY - 45)) | (1 << (PlantUMLParser.QUOTATION - 45)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;

Enum_declarationContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

Enum_declarationContext.prototype.NEWLINE = function() {
    return this.getToken(PlantUMLParser.NEWLINE, 0);
};

Enum_declarationContext.prototype.item_list = function() {
    return this.getTypedRuleContext(Item_listContext,0);
};

Enum_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterEnum_declaration(this);
	}
};

Enum_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitEnum_declaration(this);
	}
};

Enum_declarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitEnum_declaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Enum_declarationContext = Enum_declarationContext;

PlantUMLParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PlantUMLParser.RULE_enum_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.match(PlantUMLParser.T__42);
        this.state = 815;
        this.ident();
        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlantUMLParser.T__11) {
            this.state = 816;
            this.match(PlantUMLParser.T__11);
            this.state = 817;
            this.match(PlantUMLParser.NEWLINE);
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PlantUMLParser.DIRECTION - 45)) | (1 << (PlantUMLParser.NOTE - 45)) | (1 << (PlantUMLParser.CLASS - 45)) | (1 << (PlantUMLParser.INTERFACE - 45)) | (1 << (PlantUMLParser.ABSTRACT - 45)) | (1 << (PlantUMLParser.OBJECT - 45)) | (1 << (PlantUMLParser.PACKAGE - 45)) | (1 << (PlantUMLParser.AS - 45)) | (1 << (PlantUMLParser.ARRAY - 45)) | (1 << (PlantUMLParser.INTEGER - 45)) | (1 << (PlantUMLParser.FLOAT - 45)) | (1 << (PlantUMLParser.WORD - 45)) | (1 << (PlantUMLParser.ANYARRAY - 45)) | (1 << (PlantUMLParser.ANY - 45)) | (1 << (PlantUMLParser.QUOTATION - 45)))) !== 0)) {
                this.state = 818;
                this.item_list();
            }

            this.state = 821;
            this.match(PlantUMLParser.T__12);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Any_except_newlineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlantUMLParser.RULE_any_except_newline;
    return this;
}

Any_except_newlineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_except_newlineContext.prototype.constructor = Any_except_newlineContext;

Any_except_newlineContext.prototype.DIRECTION = function() {
    return this.getToken(PlantUMLParser.DIRECTION, 0);
};

Any_except_newlineContext.prototype.NOTE = function() {
    return this.getToken(PlantUMLParser.NOTE, 0);
};

Any_except_newlineContext.prototype.CLASS = function() {
    return this.getToken(PlantUMLParser.CLASS, 0);
};

Any_except_newlineContext.prototype.INTERFACE = function() {
    return this.getToken(PlantUMLParser.INTERFACE, 0);
};

Any_except_newlineContext.prototype.ABSTRACT = function() {
    return this.getToken(PlantUMLParser.ABSTRACT, 0);
};

Any_except_newlineContext.prototype.OBJECT = function() {
    return this.getToken(PlantUMLParser.OBJECT, 0);
};

Any_except_newlineContext.prototype.PACKAGE = function() {
    return this.getToken(PlantUMLParser.PACKAGE, 0);
};

Any_except_newlineContext.prototype.AS = function() {
    return this.getToken(PlantUMLParser.AS, 0);
};

Any_except_newlineContext.prototype.ARRAY = function() {
    return this.getToken(PlantUMLParser.ARRAY, 0);
};

Any_except_newlineContext.prototype.INTEGER = function() {
    return this.getToken(PlantUMLParser.INTEGER, 0);
};

Any_except_newlineContext.prototype.FLOAT = function() {
    return this.getToken(PlantUMLParser.FLOAT, 0);
};

Any_except_newlineContext.prototype.ANYARRAY = function() {
    return this.getToken(PlantUMLParser.ANYARRAY, 0);
};

Any_except_newlineContext.prototype.WORD = function() {
    return this.getToken(PlantUMLParser.WORD, 0);
};

Any_except_newlineContext.prototype.ANY = function() {
    return this.getToken(PlantUMLParser.ANY, 0);
};

Any_except_newlineContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.enterAny_except_newline(this);
	}
};

Any_except_newlineContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlantUMLListener ) {
        listener.exitAny_except_newline(this);
	}
};

Any_except_newlineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PlantUMLVisitor ) {
        return visitor.visitAny_except_newline(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PlantUMLParser.Any_except_newlineContext = Any_except_newlineContext;

PlantUMLParser.prototype.any_except_newline = function() {

    var localctx = new Any_except_newlineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PlantUMLParser.RULE_any_except_newline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        _la = this._input.LA(1);
        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PlantUMLParser.DIRECTION - 45)) | (1 << (PlantUMLParser.NOTE - 45)) | (1 << (PlantUMLParser.CLASS - 45)) | (1 << (PlantUMLParser.INTERFACE - 45)) | (1 << (PlantUMLParser.ABSTRACT - 45)) | (1 << (PlantUMLParser.OBJECT - 45)) | (1 << (PlantUMLParser.PACKAGE - 45)) | (1 << (PlantUMLParser.AS - 45)) | (1 << (PlantUMLParser.ARRAY - 45)) | (1 << (PlantUMLParser.INTEGER - 45)) | (1 << (PlantUMLParser.FLOAT - 45)) | (1 << (PlantUMLParser.WORD - 45)) | (1 << (PlantUMLParser.ANYARRAY - 45)) | (1 << (PlantUMLParser.ANY - 45)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.PlantUMLParser = PlantUMLParser;
